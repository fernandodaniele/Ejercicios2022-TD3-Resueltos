
Ej5-SecuenciaLed-Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce8  08007ce8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf0  08007cf0  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000810  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b0  200008b0  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b601  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f9e  00000000  00000000  0003b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  0003f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  000407d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024327  00000000  00000000  000417a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c6d  00000000  00000000  00065ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb78e  00000000  00000000  0007e734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149ec2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048bc  00000000  00000000  00149f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cb4 	.word	0x08007cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08007cb4 	.word	0x08007cb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	4b71      	ldr	r3, [pc, #452]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a70      	ldr	r2, [pc, #448]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b6e      	ldr	r3, [pc, #440]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b6a      	ldr	r3, [pc, #424]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a69      	ldr	r2, [pc, #420]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b67      	ldr	r3, [pc, #412]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b63      	ldr	r3, [pc, #396]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a62      	ldr	r2, [pc, #392]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b60      	ldr	r3, [pc, #384]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a5b      	ldr	r2, [pc, #364]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b59      	ldr	r3, [pc, #356]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b55      	ldr	r3, [pc, #340]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a54      	ldr	r2, [pc, #336]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b52      	ldr	r3, [pc, #328]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b4e      	ldr	r3, [pc, #312]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a4d      	ldr	r2, [pc, #308]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4848      	ldr	r0, [pc, #288]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 8000584:	f000 ff42 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	4846      	ldr	r0, [pc, #280]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 800058e:	f000 ff3d 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000592:	2200      	movs	r2, #0
 8000594:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000598:	4844      	ldr	r0, [pc, #272]	; (80006ac <MX_GPIO_Init+0x1ec>)
 800059a:	f000 ff37 	bl	800140c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800059e:	2308      	movs	r3, #8
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	4619      	mov	r1, r3
 80005b4:	483b      	ldr	r0, [pc, #236]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 80005b6:	f000 fd75 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4835      	ldr	r0, [pc, #212]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 80005d2:	f000 fd67 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005d6:	2308      	movs	r3, #8
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005e6:	2305      	movs	r3, #5
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	482d      	ldr	r0, [pc, #180]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 80005f2:	f000 fd57 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	4829      	ldr	r0, [pc, #164]	; (80006b0 <MX_GPIO_Init+0x1f0>)
 800060a:	f000 fd4b 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800060e:	2304      	movs	r3, #4
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4824      	ldr	r0, [pc, #144]	; (80006b4 <MX_GPIO_Init+0x1f4>)
 8000622:	f000 fd3f 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000638:	2305      	movs	r3, #5
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_GPIO_Init+0x1f4>)
 8000644:	f000 fd2e 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000648:	f24f 0310 	movw	r3, #61456	; 0xf010
 800064c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <MX_GPIO_Init+0x1ec>)
 8000662:	f000 fd1f 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000666:	2320      	movs	r3, #32
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fd13 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000682:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 8000694:	f000 fd06 	bl	80010a4 <HAL_GPIO_Init>

}
 8000698:	bf00      	nop
 800069a:	3730      	adds	r7, #48	; 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020400 	.word	0x40020400

080006b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_I2C1_Init+0x50>)
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <MX_I2C1_Init+0x54>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_I2C1_Init+0x50>)
 80006c4:	4a12      	ldr	r2, [pc, #72]	; (8000710 <MX_I2C1_Init+0x58>)
 80006c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_I2C1_Init+0x50>)
 80006d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_I2C1_Init+0x50>)
 80006f6:	f002 fc13 	bl	8002f20 <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 f9d6 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40005400 	.word	0x40005400
 8000710:	000186a0 	.word	0x000186a0

08000714 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <HAL_I2C_MspInit+0x84>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d12c      	bne.n	8000790 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_I2C_MspInit+0x88>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <HAL_I2C_MspInit+0x88>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_I2C_MspInit+0x88>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000752:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000764:	2304      	movs	r3, #4
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <HAL_I2C_MspInit+0x8c>)
 8000770:	f000 fc98 	bl	80010a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_I2C_MspInit+0x88>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_I2C_MspInit+0x88>)
 800077e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_I2C_MspInit+0x88>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40005400 	.word	0x40005400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020400 	.word	0x40020400

080007a4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <MX_I2S3_Init+0x58>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <MX_I2S3_Init+0x5c>)
 80007ce:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2S3_Init+0x54>)
 80007e4:	f002 fce0 	bl	80031a8 <HAL_I2S_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ee:	f000 f95f 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000120 	.word	0x20000120
 80007fc:	40003c00 	.word	0x40003c00
 8000800:	00017700 	.word	0x00017700

08000804 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <HAL_I2S_MspInit+0xf0>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d15a      	bne.n	80008ea <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fdaf 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000850:	f000 f92e 	bl	8000ab0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 800085e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_I2S_MspInit+0xf4>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a8:	2310      	movs	r3, #16
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b8:	2306      	movs	r3, #6
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <HAL_I2S_MspInit+0xf8>)
 80008c4:	f000 fbee 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008da:	2306      	movs	r3, #6
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4806      	ldr	r0, [pc, #24]	; (8000900 <HAL_I2S_MspInit+0xfc>)
 80008e6:	f000 fbdd 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40003c00 	.word	0x40003c00
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020800 	.word	0x40020800

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 fa23 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f865 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f7ff fdd5 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000916:	f7ff fecf 	bl	80006b8 <MX_I2C1_Init>
  MX_I2S3_Init();
 800091a:	f7ff ff43 	bl	80007a4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800091e:	f000 f8cd 	bl	8000abc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000922:	f006 fdb5 	bl	8007490 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  int i = 0, sentido = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800092e:	f006 fdd5 	bl	80074dc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (HAL_GPIO_ReadPin(GPIOA,B1_Pin) == 1)
 8000932:	2101      	movs	r1, #1
 8000934:	4826      	ldr	r0, [pc, #152]	; (80009d0 <main+0xcc>)
 8000936:	f000 fd51 	bl	80013dc <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d106      	bne.n	800094e <main+0x4a>
	{
		sentido = !sentido;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf0c      	ite	eq
 8000946:	2301      	moveq	r3, #1
 8000948:	2300      	movne	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	603b      	str	r3, [r7, #0]
	}


	if (sentido == 0)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d11c      	bne.n	800098e <main+0x8a>
	{
		HAL_GPIO_WritePin(GPIOD,led[i], GPIO_PIN_RESET); //GPIO_PIN_RESET = 0
 8000954:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <main+0xd0>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095c:	b29b      	uxth	r3, r3
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	481d      	ldr	r0, [pc, #116]	; (80009d8 <main+0xd4>)
 8000964:	f000 fd52 	bl	800140c <HAL_GPIO_WritePin>
		i++;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3301      	adds	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
		if ( i >= N_LED ){
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b03      	cmp	r3, #3
 8000972:	dd01      	ble.n	8000978 <main+0x74>
			i = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOD,led[i], GPIO_PIN_SET); //GPIO_PIN_SET = 1
 8000978:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <main+0xd0>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	b29b      	uxth	r3, r3
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <main+0xd4>)
 8000988:	f000 fd40 	bl	800140c <HAL_GPIO_WritePin>
 800098c:	e01b      	b.n	80009c6 <main+0xc2>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD,led[i], 0);
 800098e:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <main+0xd0>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	b29b      	uxth	r3, r3
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <main+0xd4>)
 800099e:	f000 fd35 	bl	800140c <HAL_GPIO_WritePin>
		i--;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
		if ( i < 0 ){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0xae>
			i = N_LED-1;
 80009ae:	2303      	movs	r3, #3
 80009b0:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(GPIOD,led[i], 1);
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <main+0xd0>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2201      	movs	r2, #1
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <main+0xd4>)
 80009c2:	f000 fd23 	bl	800140c <HAL_GPIO_WritePin>
	}
	HAL_Delay(T_ON); //Retardo de un tiempo igual a T_ON
 80009c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ca:	f000 fa35 	bl	8000e38 <HAL_Delay>
    MX_USB_HOST_Process();
 80009ce:	e7ae      	b.n	800092e <main+0x2a>
 80009d0:	40020000 	.word	0x40020000
 80009d4:	20000000 	.word	0x20000000
 80009d8:	40020c00 	.word	0x40020c00

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f892 	bl	8007b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a27      	ldr	r2, [pc, #156]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <SystemClock_Config+0xcc>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SystemClock_Config+0xd0>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <SystemClock_Config+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 f840 	bl	8003ae8 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a6e:	f000 f81f 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2105      	movs	r1, #5
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 faa1 	bl	8003fd8 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a9c:	f000 f808 	bl	8000ab0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f003 fd8b 	bl	8004628 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff ffca 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000168 	.word	0x20000168
 8000b24:	40013000 	.word	0x40013000

08000b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b82:	23e0      	movs	r3, #224	; 0xe0
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b92:	2305      	movs	r3, #5
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	f000 fa81 	bl	80010a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 fa12 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8d0 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <OTG_FS_IRQHandler+0x10>)
 8000c62:	f000 fe57 	bl	8001914 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000059c 	.word	0x2000059c

08000c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <_sbrk+0x5c>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <_sbrk+0x60>)
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <_sbrk+0x64>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <_sbrk+0x68>)
 8000c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d207      	bcs.n	8000cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca0:	f006 fefe 	bl	8007aa0 <__errno>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20020000 	.word	0x20020000
 8000cd0:	00000400 	.word	0x00000400
 8000cd4:	200000bc 	.word	0x200000bc
 8000cd8:	200008b0 	.word	0x200008b0

08000cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d2a:	f7ff ffd7 	bl	8000cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f006 febd 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fde7 	bl	8000904 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000d44:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 8000d48:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000d4c:	200008b0 	.word	0x200008b0

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_Init+0x40>)
 8000d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_Init+0x40>)
 8000d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x40>)
 8000d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f94f 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f808 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff ff16 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023c00 	.word	0x40023c00

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f967 	bl	800108a <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f92f 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000010 	.word	0x20000010
 8000df0:	20000018 	.word	0x20000018
 8000df4:	20000014 	.word	0x20000014

08000df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x20>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x24>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_IncTick+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	200001c0 	.word	0x200001c0

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200001c0 	.word	0x200001c0

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffde 	bl	8000e20 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000018 	.word	0x20000018

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff29 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff3e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff31 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e16b      	b.n	8001398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 815a 	bne.w	8001392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80b4 	beq.w	8001392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b5d      	ldr	r3, [pc, #372]	; (80013b0 <HAL_GPIO_Init+0x30c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a5b      	ldr	r2, [pc, #364]	; (80013b4 <HAL_GPIO_Init+0x310>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_GPIO_Init+0x314>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d02b      	beq.n	80012ca <HAL_GPIO_Init+0x226>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_GPIO_Init+0x318>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x222>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a50      	ldr	r2, [pc, #320]	; (80013c0 <HAL_GPIO_Init+0x31c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x21e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	; (80013c4 <HAL_GPIO_Init+0x320>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x21a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4e      	ldr	r2, [pc, #312]	; (80013c8 <HAL_GPIO_Init+0x324>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x216>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4d      	ldr	r2, [pc, #308]	; (80013cc <HAL_GPIO_Init+0x328>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x212>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x32c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x20e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <HAL_GPIO_Init+0x330>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x20a>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e00e      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ae:	2308      	movs	r3, #8
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x228>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x310>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_GPIO_Init+0x334>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130e:	4a32      	ldr	r2, [pc, #200]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001338:	4a27      	ldr	r2, [pc, #156]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <HAL_GPIO_Init+0x334>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_GPIO_Init+0x334>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae90 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40021c00 	.word	0x40021c00
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e001      	b.n	80013fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	619a      	str	r2, [r3, #24]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800143e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001440:	b08f      	sub	sp, #60	; 0x3c
 8001442:	af0a      	add	r7, sp, #40	; 0x28
 8001444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e054      	b.n	80014fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f006 f86e 	bl	800754c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f9c5 	bl	800481e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	687e      	ldr	r6, [r7, #4]
 800149c:	466d      	mov	r5, sp
 800149e:	f106 0410 	add.w	r4, r6, #16
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b2:	1d33      	adds	r3, r6, #4
 80014b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b6:	6838      	ldr	r0, [r7, #0]
 80014b8:	f003 f93f 	bl	800473a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 f9bc 	bl	8004840 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	687e      	ldr	r6, [r7, #4]
 80014d0:	466d      	mov	r5, sp
 80014d2:	f106 0410 	add.w	r4, r6, #16
 80014d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80014e6:	1d33      	adds	r3, r6, #4
 80014e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f003 fb22 	bl	8004b34 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001502 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001502:	b590      	push	{r4, r7, lr}
 8001504:	b089      	sub	sp, #36	; 0x24
 8001506:	af04      	add	r7, sp, #16
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	4608      	mov	r0, r1
 800150c:	4611      	mov	r1, r2
 800150e:	461a      	mov	r2, r3
 8001510:	4603      	mov	r3, r0
 8001512:	70fb      	strb	r3, [r7, #3]
 8001514:	460b      	mov	r3, r1
 8001516:	70bb      	strb	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_HCD_HC_Init+0x28>
 8001526:	2302      	movs	r3, #2
 8001528:	e076      	b.n	8001618 <HAL_HCD_HC_Init+0x116>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	212c      	movs	r1, #44	; 0x2c
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	333d      	adds	r3, #61	; 0x3d
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3338      	adds	r3, #56	; 0x38
 8001552:	787a      	ldrb	r2, [r7, #1]
 8001554:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001556:	78fb      	ldrb	r3, [r7, #3]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	212c      	movs	r1, #44	; 0x2c
 800155c:	fb01 f303 	mul.w	r3, r1, r3
 8001560:	4413      	add	r3, r2
 8001562:	3340      	adds	r3, #64	; 0x40
 8001564:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001566:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	212c      	movs	r1, #44	; 0x2c
 800156e:	fb01 f303 	mul.w	r3, r1, r3
 8001572:	4413      	add	r3, r2
 8001574:	3339      	adds	r3, #57	; 0x39
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	212c      	movs	r1, #44	; 0x2c
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	333f      	adds	r3, #63	; 0x3f
 8001588:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800158c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	78ba      	ldrb	r2, [r7, #2]
 8001592:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001596:	b2d0      	uxtb	r0, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	212c      	movs	r1, #44	; 0x2c
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	333a      	adds	r3, #58	; 0x3a
 80015a4:	4602      	mov	r2, r0
 80015a6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da09      	bge.n	80015c4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	212c      	movs	r1, #44	; 0x2c
 80015b6:	fb01 f303 	mul.w	r3, r1, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	333b      	adds	r3, #59	; 0x3b
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	e008      	b.n	80015d6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	333b      	adds	r3, #59	; 0x3b
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	333c      	adds	r3, #60	; 0x3c
 80015e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015e8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	787c      	ldrb	r4, [r7, #1]
 80015f0:	78ba      	ldrb	r2, [r7, #2]
 80015f2:	78f9      	ldrb	r1, [r7, #3]
 80015f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	f003 fc0f 	bl	8004e28 <USB_HC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}

08001620 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001636:	2b01      	cmp	r3, #1
 8001638:	d101      	bne.n	800163e <HAL_HCD_HC_Halt+0x1e>
 800163a:	2302      	movs	r3, #2
 800163c:	e00f      	b.n	800165e <HAL_HCD_HC_Halt+0x3e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fe4b 	bl	80052ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	70fb      	strb	r3, [r7, #3]
 800167a:	460b      	mov	r3, r1
 800167c:	70bb      	strb	r3, [r7, #2]
 800167e:	4613      	mov	r3, r2
 8001680:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333b      	adds	r3, #59	; 0x3b
 8001690:	78ba      	ldrb	r2, [r7, #2]
 8001692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	333f      	adds	r3, #63	; 0x3f
 80016a2:	787a      	ldrb	r2, [r7, #1]
 80016a4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016a6:	7c3b      	ldrb	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d112      	bne.n	80016d2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	212c      	movs	r1, #44	; 0x2c
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3342      	adds	r3, #66	; 0x42
 80016ba:	2203      	movs	r2, #3
 80016bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	212c      	movs	r1, #44	; 0x2c
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	333d      	adds	r3, #61	; 0x3d
 80016cc:	7f3a      	ldrb	r2, [r7, #28]
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e008      	b.n	80016e4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	3342      	adds	r3, #66	; 0x42
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	f200 80c6 	bhi.w	8001878 <HAL_HCD_HC_SubmitRequest+0x210>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f2:	bf00      	nop
 80016f4:	08001705 	.word	0x08001705
 80016f8:	08001865 	.word	0x08001865
 80016fc:	08001769 	.word	0x08001769
 8001700:	080017e7 	.word	0x080017e7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001704:	7c3b      	ldrb	r3, [r7, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	f040 80b8 	bne.w	800187c <HAL_HCD_HC_SubmitRequest+0x214>
 800170c:	78bb      	ldrb	r3, [r7, #2]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 80b4 	bne.w	800187c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001714:	8b3b      	ldrh	r3, [r7, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d108      	bne.n	800172c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	3355      	adds	r3, #85	; 0x55
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	212c      	movs	r1, #44	; 0x2c
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	4413      	add	r3, r2
 8001738:	3355      	adds	r3, #85	; 0x55
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	212c      	movs	r1, #44	; 0x2c
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	3342      	adds	r3, #66	; 0x42
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001752:	e093      	b.n	800187c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	212c      	movs	r1, #44	; 0x2c
 800175a:	fb01 f303 	mul.w	r3, r1, r3
 800175e:	4413      	add	r3, r2
 8001760:	3342      	adds	r3, #66	; 0x42
 8001762:	2202      	movs	r2, #2
 8001764:	701a      	strb	r2, [r3, #0]
      break;
 8001766:	e089      	b.n	800187c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d11d      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3355      	adds	r3, #85	; 0x55
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001794:	e073      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2202      	movs	r2, #2
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e069      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017aa:	78fb      	ldrb	r3, [r7, #3]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	3354      	adds	r3, #84	; 0x54
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3342      	adds	r3, #66	; 0x42
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
      break;
 80017d0:	e055      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3342      	adds	r3, #66	; 0x42
 80017e0:	2202      	movs	r2, #2
 80017e2:	701a      	strb	r2, [r3, #0]
      break;
 80017e4:	e04b      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017e6:	78bb      	ldrb	r3, [r7, #2]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11d      	bne.n	8001828 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3355      	adds	r3, #85	; 0x55
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001812:	e034      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3342      	adds	r3, #66	; 0x42
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e02a      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3354      	adds	r3, #84	; 0x54
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3342      	adds	r3, #66	; 0x42
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e016      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
      break;
 8001862:	e00c      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e002      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800187c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3344      	adds	r3, #68	; 0x44
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	8b3a      	ldrh	r2, [r7, #24]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	202c      	movs	r0, #44	; 0x2c
 8001898:	fb00 f303 	mul.w	r3, r0, r3
 800189c:	440b      	add	r3, r1
 800189e:	334c      	adds	r3, #76	; 0x4c
 80018a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3360      	adds	r3, #96	; 0x60
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3350      	adds	r3, #80	; 0x50
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	212c      	movs	r1, #44	; 0x2c
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	3339      	adds	r3, #57	; 0x39
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	212c      	movs	r1, #44	; 0x2c
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	3361      	adds	r3, #97	; 0x61
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	222c      	movs	r2, #44	; 0x2c
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	3338      	adds	r3, #56	; 0x38
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	18d1      	adds	r1, r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	f003 fb9e 	bl	8005044 <USB_HC_StartXfer>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop

08001914 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f8c1 	bl	8004ab2 <USB_GetMode>
 8001930:	4603      	mov	r3, r0
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 80f6 	bne.w	8001b24 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 f8a5 	bl	8004a8c <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80ec 	beq.w	8001b22 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f89c 	bl	8004a8c <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800195e:	d104      	bne.n	800196a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001968:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 f88c 	bl	8004a8c <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800197e:	d104      	bne.n	800198a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001988:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f87c 	bl	8004a8c <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800199e:	d104      	bne.n	80019aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 f86c 	bl	8004a8c <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 f85e 	bl	8004a8c <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019da:	d11c      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019e4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10f      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019f6:	2110      	movs	r1, #16
 80019f8:	6938      	ldr	r0, [r7, #16]
 80019fa:	f002 ff6d 	bl	80048d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019fe:	6938      	ldr	r0, [r7, #16]
 8001a00:	f002 ff8e 	bl	8004920 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 f946 	bl	8004c9c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f005 fe19 	bl	8007648 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f836 	bl	8004a8c <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2a:	d102      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f001 fa03 	bl	8002e38 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f828 	bl	8004a8c <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d106      	bne.n	8001a54 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fde2 	bl	8007610 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f817 	bl	8004a8c <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d101      	bne.n	8001a6c <HAL_HCD_IRQHandler+0x158>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_HCD_IRQHandler+0x15a>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0210 	bic.w	r2, r2, #16
 8001a80:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 f906 	bl	8002c94 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0210 	orr.w	r2, r2, #16
 8001a96:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fff5 	bl	8004a8c <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aac:	d13a      	bne.n	8001b24 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc08 	bl	80052c8 <USB_HC_ReadInterrupt>
 8001ab8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e025      	b.n	8001b0c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d018      	beq.n	8001b06 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aea:	d106      	bne.n	8001afa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f8ab 	bl	8001c4e <HCD_HC_IN_IRQHandler>
 8001af8:	e005      	b.n	8001b06 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fcc6 	bl	8002492 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3d4      	bcc.n	8001ac0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	e000      	b.n	8001b24 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b22:	bf00      	nop
    }
  }
}
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_HCD_Start+0x16>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e013      	b.n	8001b68 <HAL_HCD_Start+0x3e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 f908 	bl	8004d64 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fe4f 	bl	80047fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_Stop+0x16>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e00d      	b.n	8001ba2 <HAL_HCD_Stop+0x32>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fd02 	bl	800559c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 f8aa 	bl	8004d10 <USB_ResetPort>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3360      	adds	r3, #96	; 0x60
 8001be0:	781b      	ldrb	r3, [r3, #0]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3350      	adds	r3, #80	; 0x50
 8001c08:	681b      	ldr	r3, [r3, #0]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f8ee 	bl	8004e04 <USB_GetCurrentFrame>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f8c9 	bl	8004dd6 <USB_GetHostSpeed>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d119      	bne.n	8001cb2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	015a      	lsls	r2, r3, #5
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	0151      	lsls	r1, r2, #5
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	60d3      	str	r3, [r2, #12]
 8001cb0:	e101      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc8:	d12b      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3361      	adds	r3, #97	; 0x61
 8001cec:	2207      	movs	r2, #7
 8001cee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	0151      	lsls	r1, r2, #5
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	440a      	add	r2, r1
 8001d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fae5 	bl	80052ea <USB_HC_Halt>
 8001d20:	e0c9      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d109      	bne.n	8001d4c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2320      	movs	r3, #32
 8001d48:	6093      	str	r3, [r2, #8]
 8001d4a:	e0b4      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d133      	bne.n	8001dca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	0151      	lsls	r1, r2, #5
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	440a      	add	r2, r1
 8001d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3361      	adds	r3, #97	; 0x61
 8001d90:	2205      	movs	r2, #5
 8001d92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	461a      	mov	r2, r3
 8001da2:	2310      	movs	r3, #16
 8001da4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	015a      	lsls	r2, r3, #5
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db2:	461a      	mov	r2, r3
 8001db4:	2308      	movs	r3, #8
 8001db6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fa91 	bl	80052ea <USB_HC_Halt>
 8001dc8:	e075      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d134      	bne.n	8001e4c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3361      	adds	r3, #97	; 0x61
 8001e10:	2208      	movs	r2, #8
 8001e12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	2310      	movs	r3, #16
 8001e24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	461a      	mov	r2, r3
 8001e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fa50 	bl	80052ea <USB_HC_Halt>
 8001e4a:	e034      	b.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b80      	cmp	r3, #128	; 0x80
 8001e60:	d129      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	0151      	lsls	r1, r2, #5
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	440a      	add	r2, r1
 8001e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3361      	adds	r3, #97	; 0x61
 8001e90:	2206      	movs	r2, #6
 8001e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fa23 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	d122      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	0151      	lsls	r1, r2, #5
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f9f6 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f10:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f12:	e2ba      	b.n	800248a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 811b 	bne.w	8002162 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3348      	adds	r3, #72	; 0x48
 8001f42:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0159      	lsls	r1, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	202c      	movs	r0, #44	; 0x2c
 8001f5e:	fb00 f303 	mul.w	r3, r0, r3
 8001f62:	440b      	add	r3, r1
 8001f64:	3350      	adds	r3, #80	; 0x50
 8001f66:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3361      	adds	r3, #97	; 0x61
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	335c      	adds	r3, #92	; 0x5c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	333f      	adds	r3, #63	; 0x3f
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	333f      	adds	r3, #63	; 0x3f
 8001fc0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d121      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	0151      	lsls	r1, r2, #5
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	440a      	add	r2, r1
 8001fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 f97a 	bl	80052ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	461a      	mov	r2, r3
 8002004:	2310      	movs	r3, #16
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	e066      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	333f      	adds	r3, #63	; 0x3f
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d127      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	0151      	lsls	r1, r2, #5
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	440a      	add	r2, r1
 8002034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800203c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3360      	adds	r3, #96	; 0x60
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	b2d9      	uxtb	r1, r3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	202c      	movs	r0, #44	; 0x2c
 800205a:	fb00 f303 	mul.w	r3, r0, r3
 800205e:	4413      	add	r3, r2
 8002060:	3360      	adds	r3, #96	; 0x60
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f005 fafc 	bl	8007664 <HAL_HCD_HC_NotifyURBChange_Callback>
 800206c:	e034      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	333f      	adds	r3, #63	; 0x3f
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d12a      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	3360      	adds	r3, #96	; 0x60
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3354      	adds	r3, #84	; 0x54
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2d8      	uxtb	r0, r3
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3354      	adds	r3, #84	; 0x54
 80020b8:	4602      	mov	r2, r0
 80020ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	b2d9      	uxtb	r1, r3
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	202c      	movs	r0, #44	; 0x2c
 80020c6:	fb00 f303 	mul.w	r3, r0, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3360      	adds	r3, #96	; 0x60
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f005 fac6 	bl	8007664 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d12b      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3348      	adds	r3, #72	; 0x48
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	202c      	movs	r0, #44	; 0x2c
 80020f6:	fb00 f202 	mul.w	r2, r0, r2
 80020fa:	440a      	add	r2, r1
 80020fc:	3240      	adds	r2, #64	; 0x40
 80020fe:	8812      	ldrh	r2, [r2, #0]
 8002100:	fbb3 f3f2 	udiv	r3, r3, r2
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 81be 	beq.w	800248a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	3354      	adds	r3, #84	; 0x54
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	b2d8      	uxtb	r0, r3
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3354      	adds	r3, #84	; 0x54
 8002132:	4602      	mov	r2, r0
 8002134:	701a      	strb	r2, [r3, #0]
}
 8002136:	e1a8      	b.n	800248a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3354      	adds	r3, #84	; 0x54
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f083 0301 	eor.w	r3, r3, #1
 800214c:	b2d8      	uxtb	r0, r3
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3354      	adds	r3, #84	; 0x54
 800215c:	4602      	mov	r2, r0
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	e193      	b.n	800248a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	f040 8106 	bne.w	8002386 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	0151      	lsls	r1, r2, #5
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	440a      	add	r2, r1
 8002190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002194:	f023 0302 	bic.w	r3, r3, #2
 8002198:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3361      	adds	r3, #97	; 0x61
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d109      	bne.n	80021c2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e0c9      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	3361      	adds	r3, #97	; 0x61
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d109      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	212c      	movs	r1, #44	; 0x2c
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	4413      	add	r3, r2
 80021e2:	3360      	adds	r3, #96	; 0x60
 80021e4:	2205      	movs	r2, #5
 80021e6:	701a      	strb	r2, [r3, #0]
 80021e8:	e0b5      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3361      	adds	r3, #97	; 0x61
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d009      	beq.n	8002212 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3361      	adds	r3, #97	; 0x61
 800220c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800220e:	2b08      	cmp	r3, #8
 8002210:	d150      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	335c      	adds	r3, #92	; 0x5c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	202c      	movs	r0, #44	; 0x2c
 800222a:	fb00 f303 	mul.w	r3, r0, r3
 800222e:	440b      	add	r3, r1
 8002230:	335c      	adds	r3, #92	; 0x5c
 8002232:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	335c      	adds	r3, #92	; 0x5c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d912      	bls.n	800226e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	335c      	adds	r3, #92	; 0x5c
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3360      	adds	r3, #96	; 0x60
 8002268:	2204      	movs	r2, #4
 800226a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800226c:	e073      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4413      	add	r3, r2
 8002288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002296:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022b2:	e050      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3361      	adds	r3, #97	; 0x61
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d122      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3360      	adds	r3, #96	; 0x60
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e023      	b.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b07      	cmp	r3, #7
 8002320:	d119      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	202c      	movs	r0, #44	; 0x2c
 800233a:	fb00 f303 	mul.w	r3, r0, r3
 800233e:	440b      	add	r3, r1
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3360      	adds	r3, #96	; 0x60
 8002352:	2204      	movs	r2, #4
 8002354:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	2302      	movs	r3, #2
 8002366:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	b2d9      	uxtb	r1, r3
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	202c      	movs	r0, #44	; 0x2c
 8002372:	fb00 f303 	mul.w	r3, r0, r3
 8002376:	4413      	add	r3, r2
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f005 f970 	bl	8007664 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002384:	e081      	b.n	800248a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	d176      	bne.n	800248a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	333f      	adds	r3, #63	; 0x3f
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d121      	bne.n	80023f4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	335c      	adds	r3, #92	; 0x5c
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	0151      	lsls	r1, r2, #5
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	440a      	add	r2, r1
 80023d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 ff7c 	bl	80052ea <USB_HC_Halt>
 80023f2:	e041      	b.n	8002478 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	333f      	adds	r3, #63	; 0x3f
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002418:	2b02      	cmp	r3, #2
 800241a:	d12d      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d120      	bne.n	8002478 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	3361      	adds	r3, #97	; 0x61
 8002444:	2203      	movs	r2, #3
 8002446:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	0151      	lsls	r1, r2, #5
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	440a      	add	r2, r1
 800245e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f002 ff39 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2310      	movs	r3, #16
 8002488:	6093      	str	r3, [r2, #8]
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d119      	bne.n	80024f6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	461a      	mov	r2, r3
 80024d0:	2304      	movs	r3, #4
 80024d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	0151      	lsls	r1, r2, #5
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	440a      	add	r2, r1
 80024ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024f4:	e3ca      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	015a      	lsls	r2, r3, #5
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	4413      	add	r3, r2
 80024fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b20      	cmp	r3, #32
 800250a:	d13e      	bne.n	800258a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	2320      	movs	r3, #32
 800251c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	333d      	adds	r3, #61	; 0x3d
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 83ac 	bne.w	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	333d      	adds	r3, #61	; 0x3d
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3360      	adds	r3, #96	; 0x60
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	0151      	lsls	r1, r2, #5
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	440a      	add	r2, r1
 800256e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f002 feb1 	bl	80052ea <USB_HC_Halt>
}
 8002588:	e380      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d122      	bne.n	80025e8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	0151      	lsls	r1, r2, #5
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	440a      	add	r2, r1
 80025b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 fe8c 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e4:	6093      	str	r3, [r2, #8]
}
 80025e6:	e351      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d150      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d111      	bne.n	800264a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	333d      	adds	r3, #61	; 0x3d
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2340      	movs	r3, #64	; 0x40
 8002648:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	0151      	lsls	r1, r2, #5
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	440a      	add	r2, r1
 8002660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fe38 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2301      	movs	r3, #1
 800268a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	212c      	movs	r1, #44	; 0x2c
 8002692:	fb01 f303 	mul.w	r3, r1, r3
 8002696:	4413      	add	r3, r2
 8002698:	3361      	adds	r3, #97	; 0x61
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
}
 800269e:	e2f5      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d13c      	bne.n	8002730 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	3361      	adds	r3, #97	; 0x61
 80026c4:	2204      	movs	r2, #4
 80026c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	333d      	adds	r3, #61	; 0x3d
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fde7 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	6093      	str	r3, [r2, #8]
}
 800272e:	e2ad      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d12a      	bne.n	800279c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	2308      	movs	r3, #8
 8002756:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f002 fdb1 	bl	80052ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3361      	adds	r3, #97	; 0x61
 8002796:	2205      	movs	r2, #5
 8002798:	701a      	strb	r2, [r3, #0]
}
 800279a:	e277      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b10      	cmp	r3, #16
 80027b0:	d150      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	335c      	adds	r3, #92	; 0x5c
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3361      	adds	r3, #97	; 0x61
 80027d2:	2203      	movs	r2, #3
 80027d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333d      	adds	r3, #61	; 0x3d
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d112      	bne.n	8002810 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	333c      	adds	r3, #60	; 0x3c
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	333d      	adds	r3, #61	; 0x3d
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fd55 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	461a      	mov	r2, r3
 800284e:	2310      	movs	r3, #16
 8002850:	6093      	str	r3, [r2, #8]
}
 8002852:	e21b      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d174      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3361      	adds	r3, #97	; 0x61
 8002880:	2206      	movs	r2, #6
 8002882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	440a      	add	r2, r1
 800289a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f002 fd1b 	bl	80052ea <USB_HC_Halt>
 80028b4:	e044      	b.n	8002940 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	335c      	adds	r3, #92	; 0x5c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	202c      	movs	r0, #44	; 0x2c
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	440b      	add	r3, r1
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	335c      	adds	r3, #92	; 0x5c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d920      	bls.n	800292e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	335c      	adds	r3, #92	; 0x5c
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	2204      	movs	r2, #4
 800290e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	b2d9      	uxtb	r1, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	202c      	movs	r0, #44	; 0x2c
 800291a:	fb00 f303 	mul.w	r3, r0, r3
 800291e:	4413      	add	r3, r2
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f004 fe9c 	bl	8007664 <HAL_HCD_HC_NotifyURBChange_Callback>
 800292c:	e008      	b.n	8002940 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3360      	adds	r3, #96	; 0x60
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	461a      	mov	r2, r3
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	6093      	str	r3, [r2, #8]
}
 8002952:	e19b      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296a:	d134      	bne.n	80029d6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	0151      	lsls	r1, r2, #5
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	440a      	add	r2, r1
 8002982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fca7 	bl	80052ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	461a      	mov	r2, r3
 80029aa:	2310      	movs	r3, #16
 80029ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	461a      	mov	r2, r3
 80029bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3361      	adds	r3, #97	; 0x61
 80029d0:	2208      	movs	r2, #8
 80029d2:	701a      	strb	r2, [r3, #0]
}
 80029d4:	e15a      	b.n	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f040 814f 	bne.w	8002c8c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	0151      	lsls	r1, r2, #5
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	440a      	add	r2, r1
 8002a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a08:	f023 0302 	bic.w	r3, r3, #2
 8002a0c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3361      	adds	r3, #97	; 0x61
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d17d      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3360      	adds	r3, #96	; 0x60
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	333f      	adds	r3, #63	; 0x3f
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d00a      	beq.n	8002a5e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	333f      	adds	r3, #63	; 0x3f
 8002a56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	f040 8100 	bne.w	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d113      	bne.n	8002a8e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3355      	adds	r3, #85	; 0x55
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2d8      	uxtb	r0, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3355      	adds	r3, #85	; 0x55
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	f040 80e3 	bne.w	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	334c      	adds	r3, #76	; 0x4c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80d8 	beq.w	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	334c      	adds	r3, #76	; 0x4c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f202 	mul.w	r2, r0, r2
 8002ac8:	440a      	add	r2, r1
 8002aca:	3240      	adds	r2, #64	; 0x40
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f202 	mul.w	r2, r0, r2
 8002adc:	440a      	add	r2, r1
 8002ade:	3240      	adds	r2, #64	; 0x40
 8002ae0:	8812      	ldrh	r2, [r2, #0]
 8002ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80b5 	beq.w	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3355      	adds	r3, #85	; 0x55
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2d8      	uxtb	r0, r3
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3355      	adds	r3, #85	; 0x55
 8002b18:	4602      	mov	r2, r0
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e09f      	b.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d109      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e08b      	b.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d109      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3360      	adds	r3, #96	; 0x60
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e077      	b.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3361      	adds	r3, #97	; 0x61
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d109      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3360      	adds	r3, #96	; 0x60
 8002b90:	2205      	movs	r2, #5
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e063      	b.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3361      	adds	r3, #97	; 0x61
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d009      	beq.n	8002bbe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3361      	adds	r3, #97	; 0x61
 8002bb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d14f      	bne.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	440b      	add	r3, r1
 8002bdc:	335c      	adds	r3, #92	; 0x5c
 8002bde:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	335c      	adds	r3, #92	; 0x5c
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d912      	bls.n	8002c1a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3360      	adds	r3, #96	; 0x60
 8002c14:	2204      	movs	r2, #4
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e021      	b.n	8002c5e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3360      	adds	r3, #96	; 0x60
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c42:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	b2d9      	uxtb	r1, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	202c      	movs	r0, #44	; 0x2c
 8002c7a:	fb00 f303 	mul.w	r3, r0, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3360      	adds	r3, #96	; 0x60
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f004 fcec 	bl	8007664 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c8c:	bf00      	nop
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	0c5b      	lsrs	r3, r3, #17
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cc8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d004      	beq.n	8002cda <HCD_RXQLVL_IRQHandler+0x46>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	f000 80a9 	beq.w	8002e2a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cd8:	e0aa      	b.n	8002e30 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a6 	beq.w	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3344      	adds	r3, #68	; 0x44
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 809b 	beq.w	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3350      	adds	r3, #80	; 0x50
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	202c      	movs	r0, #44	; 0x2c
 8002d12:	fb00 f303 	mul.w	r3, r0, r3
 8002d16:	440b      	add	r3, r1
 8002d18:	334c      	adds	r3, #76	; 0x4c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d87a      	bhi.n	8002e16 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3344      	adds	r3, #68	; 0x44
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	b292      	uxth	r2, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f001 fe4f 	bl	80049dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3344      	adds	r3, #68	; 0x44
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	441a      	add	r2, r3
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	202c      	movs	r0, #44	; 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3344      	adds	r3, #68	; 0x44
 8002d60:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3350      	adds	r3, #80	; 0x50
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	441a      	add	r2, r3
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	202c      	movs	r0, #44	; 0x2c
 8002d7c:	fb00 f303 	mul.w	r3, r0, r3
 8002d80:	440b      	add	r3, r1
 8002d82:	3350      	adds	r3, #80	; 0x50
 8002d84:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	0cdb      	lsrs	r3, r3, #19
 8002d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3340      	adds	r3, #64	; 0x40
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d13c      	bne.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d039      	beq.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3354      	adds	r3, #84	; 0x54
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2d8      	uxtb	r0, r3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3354      	adds	r3, #84	; 0x54
 8002e10:	4602      	mov	r2, r0
 8002e12:	701a      	strb	r2, [r3, #0]
      break;
 8002e14:	e00b      	b.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3360      	adds	r3, #96	; 0x60
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
      break;
 8002e28:	e001      	b.n	8002e2e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e2e:	bf00      	nop
  }
}
 8002e30:	bf00      	nop
 8002e32:	3728      	adds	r7, #40	; 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e64:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d10b      	bne.n	8002e88 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f004 fbd6 	bl	800762c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d132      	bne.n	8002ef8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d126      	bne.n	8002ef2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d113      	bne.n	8002ed4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eb6:	d106      	bne.n	8002ec6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 feec 	bl	8004c9c <USB_InitFSLSPClkSel>
 8002ec4:	e011      	b.n	8002eea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fee5 	bl	8004c9c <USB_InitFSLSPClkSel>
 8002ed2:	e00a      	b.n	8002eea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ee8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f004 fbc8 	bl	8007680 <HAL_HCD_PortEnabled_Callback>
 8002ef0:	e002      	b.n	8002ef8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f004 fbd2 	bl	800769c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d103      	bne.n	8002f0a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f043 0320 	orr.w	r3, r3, #32
 8002f08:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6013      	str	r3, [r2, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e12b      	b.n	800318a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fd fbe4 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f84:	f001 f9fc 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4a81      	ldr	r2, [pc, #516]	; (8003194 <HAL_I2C_Init+0x274>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d807      	bhi.n	8002fa4 <HAL_I2C_Init+0x84>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a80      	ldr	r2, [pc, #512]	; (8003198 <HAL_I2C_Init+0x278>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	bf94      	ite	ls
 8002f9c:	2301      	movls	r3, #1
 8002f9e:	2300      	movhi	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e006      	b.n	8002fb2 <HAL_I2C_Init+0x92>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4a7d      	ldr	r2, [pc, #500]	; (800319c <HAL_I2C_Init+0x27c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	bf94      	ite	ls
 8002fac:	2301      	movls	r3, #1
 8002fae:	2300      	movhi	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0e7      	b.n	800318a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a78      	ldr	r2, [pc, #480]	; (80031a0 <HAL_I2C_Init+0x280>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0c9b      	lsrs	r3, r3, #18
 8002fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a6a      	ldr	r2, [pc, #424]	; (8003194 <HAL_I2C_Init+0x274>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <HAL_I2C_Init+0xd4>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	e009      	b.n	8003008 <HAL_I2C_Init+0xe8>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	4a69      	ldr	r2, [pc, #420]	; (80031a4 <HAL_I2C_Init+0x284>)
 8003000:	fba2 2303 	umull	r2, r3, r2, r3
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	3301      	adds	r3, #1
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800301a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	495c      	ldr	r1, [pc, #368]	; (8003194 <HAL_I2C_Init+0x274>)
 8003024:	428b      	cmp	r3, r1
 8003026:	d819      	bhi.n	800305c <HAL_I2C_Init+0x13c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1e59      	subs	r1, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fbb1 f3f3 	udiv	r3, r1, r3
 8003036:	1c59      	adds	r1, r3, #1
 8003038:	f640 73fc 	movw	r3, #4092	; 0xffc
 800303c:	400b      	ands	r3, r1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_I2C_Init+0x138>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	1e59      	subs	r1, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	e051      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 8003058:	2304      	movs	r3, #4
 800305a:	e04f      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d111      	bne.n	8003088 <HAL_I2C_Init+0x168>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e012      	b.n	80030ae <HAL_I2C_Init+0x18e>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	0099      	lsls	r1, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Init+0x196>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e022      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10e      	bne.n	80030dc <HAL_I2C_Init+0x1bc>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1e58      	subs	r0, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6859      	ldr	r1, [r3, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	440b      	add	r3, r1
 80030cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030da:	e00f      	b.n	80030fc <HAL_I2C_Init+0x1dc>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	0099      	lsls	r1, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	6809      	ldr	r1, [r1, #0]
 8003100:	4313      	orrs	r3, r2
 8003102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800312a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6911      	ldr	r1, [r2, #16]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68d2      	ldr	r2, [r2, #12]
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	430b      	orrs	r3, r1
 800313e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	000186a0 	.word	0x000186a0
 8003198:	001e847f 	.word	0x001e847f
 800319c:	003d08ff 	.word	0x003d08ff
 80031a0:	431bde83 	.word	0x431bde83
 80031a4:	10624dd3 	.word	0x10624dd3

080031a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e128      	b.n	800340c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a90      	ldr	r2, [pc, #576]	; (8003414 <HAL_I2S_Init+0x26c>)
 80031d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fb15 	bl	8000804 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f0:	f023 030f 	bic.w	r3, r3, #15
 80031f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d060      	beq.n	80032c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800320e:	2310      	movs	r3, #16
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e001      	b.n	8003218 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b20      	cmp	r3, #32
 800321e:	d802      	bhi.n	8003226 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003226:	2001      	movs	r0, #1
 8003228:	f001 f9a0 	bl	800456c <HAL_RCCEx_GetPeriphCLKFreq>
 800322c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d125      	bne.n	8003284 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fbb2 f2f3 	udiv	r2, r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	fbb2 f3f3 	udiv	r3, r2, r3
 800325c:	3305      	adds	r3, #5
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	e01f      	b.n	80032a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	fbb2 f2f3 	udiv	r2, r2, r3
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	3305      	adds	r3, #5
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e00e      	b.n	80032a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fbb2 f2f3 	udiv	r2, r2, r3
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	461a      	mov	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	3305      	adds	r3, #5
 80032a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_I2S_Init+0x270>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	e003      	b.n	80032d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d902      	bls.n	80032dc <HAL_I2S_Init+0x134>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d907      	bls.n	80032ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f043 0210 	orr.w	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e08f      	b.n	800340c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	ea42 0103 	orr.w	r1, r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6851      	ldr	r1, [r2, #4]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6892      	ldr	r2, [r2, #8]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6992      	ldr	r2, [r2, #24]
 8003322:	430a      	orrs	r2, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d161      	bne.n	80033fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_I2S_Init+0x274>)
 800333c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a37      	ldr	r2, [pc, #220]	; (8003420 <HAL_I2S_Init+0x278>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_I2S_Init+0x1a4>
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_I2S_Init+0x27c>)
 800334a:	e001      	b.n	8003350 <HAL_I2S_Init+0x1a8>
 800334c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	4932      	ldr	r1, [pc, #200]	; (8003420 <HAL_I2S_Init+0x278>)
 8003358:	428a      	cmp	r2, r1
 800335a:	d101      	bne.n	8003360 <HAL_I2S_Init+0x1b8>
 800335c:	4a31      	ldr	r2, [pc, #196]	; (8003424 <HAL_I2S_Init+0x27c>)
 800335e:	e001      	b.n	8003364 <HAL_I2S_Init+0x1bc>
 8003360:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003364:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003368:	f023 030f 	bic.w	r3, r3, #15
 800336c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <HAL_I2S_Init+0x278>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_I2S_Init+0x1d4>
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <HAL_I2S_Init+0x27c>)
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x1d8>
 800337c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003380:	2202      	movs	r2, #2
 8003382:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_I2S_Init+0x278>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_I2S_Init+0x1ea>
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <HAL_I2S_Init+0x27c>)
 8003390:	e001      	b.n	8003396 <HAL_I2S_Init+0x1ee>
 8003392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d003      	beq.n	80033ac <HAL_I2S_Init+0x204>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e001      	b.n	80033b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033d6:	4313      	orrs	r3, r2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	4313      	orrs	r3, r2
 80033de:	b29b      	uxth	r3, r3
 80033e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x24c>
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x250>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	897a      	ldrh	r2, [r7, #10]
 80033fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	0800351f 	.word	0x0800351f
 8003418:	cccccccd 	.word	0xcccccccd
 800341c:	08003635 	.word	0x08003635
 8003420:	40003800 	.word	0x40003800
 8003424:	40003400 	.word	0x40003400

08003428 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	881a      	ldrh	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10e      	bne.n	80034b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffb8 	bl	8003428 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	b292      	uxth	r2, r2
 80034d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	1c9a      	adds	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10e      	bne.n	8003516 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003506:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff93 	bl	800343c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b04      	cmp	r3, #4
 8003538:	d13a      	bne.n	80035b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d109      	bne.n	8003558 <I2S_IRQHandler+0x3a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d102      	bne.n	8003558 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffb4 	bl	80034c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d126      	bne.n	80035b0 <I2S_IRQHandler+0x92>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b20      	cmp	r3, #32
 800356e:	d11f      	bne.n	80035b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff50 	bl	8003450 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d136      	bne.n	800362a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d109      	bne.n	80035da <I2S_IRQHandler+0xbc>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b80      	cmp	r3, #128	; 0x80
 80035d2:	d102      	bne.n	80035da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff45 	bl	8003464 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d122      	bne.n	800362a <I2S_IRQHandler+0x10c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d11b      	bne.n	800362a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003600:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff13 	bl	8003450 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4aa2      	ldr	r2, [pc, #648]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800364e:	4ba2      	ldr	r3, [pc, #648]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a9b      	ldr	r2, [pc, #620]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800366c:	4b9a      	ldr	r3, [pc, #616]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800366e:	e001      	b.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003680:	d004      	beq.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 8099 	bne.w	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d107      	bne.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f925 	bl	80038f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9c8 	bl	8003a50 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d13a      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d035      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036de:	4b7e      	ldr	r3, [pc, #504]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e0:	e001      	b.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4979      	ldr	r1, [pc, #484]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ee:	428b      	cmp	r3, r1
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80036f2:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800370e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f043 0202 	orr.w	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fe88 	bl	8003450 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b08      	cmp	r3, #8
 8003748:	f040 80be 	bne.w	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80b8 	beq.w	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003766:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a59      	ldr	r2, [pc, #356]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003772:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003774:	e001      	b.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4954      	ldr	r1, [pc, #336]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003782:	428b      	cmp	r3, r1
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003792:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fe4a 	bl	8003450 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037bc:	e084      	b.n	80038c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d107      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8be 	bl	8003954 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8fd 	bl	80039ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d12f      	bne.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003814:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2e      	ldr	r2, [pc, #184]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003820:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003822:	e001      	b.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4929      	ldr	r1, [pc, #164]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d101      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003836:	e001      	b.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0202 	orr.w	r2, r3, #2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fdfa 	bl	8003450 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d131      	bne.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d02c      	beq.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800387c:	e001      	b.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800387e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4912      	ldr	r1, [pc, #72]	; (80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800388a:	428b      	cmp	r3, r1
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	f043 0204 	orr.w	r2, r3, #4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fdc5 	bl	8003450 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c6:	e000      	b.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038c8:	bf00      	nop
}
 80038ca:	bf00      	nop
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40003800 	.word	0x40003800
 80038d8:	40003400 	.word	0x40003400

080038dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	1c99      	adds	r1, r3, #2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6251      	str	r1, [r2, #36]	; 0x24
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d113      	bne.n	800394a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003930:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffc9 	bl	80038dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	1c99      	adds	r1, r3, #2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6251      	str	r1, [r2, #36]	; 0x24
 8003966:	8819      	ldrh	r1, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <I2SEx_TxISR_I2SExt+0x90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <I2SEx_TxISR_I2SExt+0x22>
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <I2SEx_TxISR_I2SExt+0x94>)
 8003974:	e001      	b.n	800397a <I2SEx_TxISR_I2SExt+0x26>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	460a      	mov	r2, r1
 800397c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d121      	bne.n	80039da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <I2SEx_TxISR_I2SExt+0x90>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <I2SEx_TxISR_I2SExt+0x50>
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <I2SEx_TxISR_I2SExt+0x94>)
 80039a2:	e001      	b.n	80039a8 <I2SEx_TxISR_I2SExt+0x54>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	490d      	ldr	r1, [pc, #52]	; (80039e4 <I2SEx_TxISR_I2SExt+0x90>)
 80039b0:	428b      	cmp	r3, r1
 80039b2:	d101      	bne.n	80039b8 <I2SEx_TxISR_I2SExt+0x64>
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <I2SEx_TxISR_I2SExt+0x94>)
 80039b6:	e001      	b.n	80039bc <I2SEx_TxISR_I2SExt+0x68>
 80039b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff81 	bl	80038dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40003800 	.word	0x40003800
 80039e8:	40003400 	.word	0x40003400

080039ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68d8      	ldr	r0, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	1c99      	adds	r1, r3, #2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a04:	b282      	uxth	r2, r0
 8003a06:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d113      	bne.n	8003a48 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a2e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ff4a 	bl	80038dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a20      	ldr	r2, [pc, #128]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x90>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <I2SEx_RxISR_I2SExt+0x16>
 8003a62:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <I2SEx_RxISR_I2SExt+0x94>)
 8003a64:	e001      	b.n	8003a6a <I2SEx_RxISR_I2SExt+0x1a>
 8003a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6a:	68d8      	ldr	r0, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	1c99      	adds	r1, r3, #2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a76:	b282      	uxth	r2, r0
 8003a78:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d121      	bne.n	8003ad6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x90>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <I2SEx_RxISR_I2SExt+0x50>
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <I2SEx_RxISR_I2SExt+0x94>)
 8003a9e:	e001      	b.n	8003aa4 <I2SEx_RxISR_I2SExt+0x54>
 8003aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	490d      	ldr	r1, [pc, #52]	; (8003ae0 <I2SEx_RxISR_I2SExt+0x90>)
 8003aac:	428b      	cmp	r3, r1
 8003aae:	d101      	bne.n	8003ab4 <I2SEx_RxISR_I2SExt+0x64>
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <I2SEx_RxISR_I2SExt+0x94>)
 8003ab2:	e001      	b.n	8003ab8 <I2SEx_RxISR_I2SExt+0x68>
 8003ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003abc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff03 	bl	80038dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40003800 	.word	0x40003800
 8003ae4:	40003400 	.word	0x40003400

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e264      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d075      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b06:	4ba3      	ldr	r3, [pc, #652]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d00c      	beq.n	8003b2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b12:	4ba0      	ldr	r3, [pc, #640]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d112      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1e:	4b9d      	ldr	r3, [pc, #628]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b2a:	d10b      	bne.n	8003b44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05b      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x108>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d157      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e23f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d106      	bne.n	8003b5c <HAL_RCC_OscConfig+0x74>
 8003b4e:	4b91      	ldr	r3, [pc, #580]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a90      	ldr	r2, [pc, #576]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e01d      	b.n	8003b98 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x98>
 8003b66:	4b8b      	ldr	r3, [pc, #556]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a8a      	ldr	r2, [pc, #552]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a87      	ldr	r2, [pc, #540]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0xb0>
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a83      	ldr	r2, [pc, #524]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fd f93e 	bl	8000e20 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fd f93a 	bl	8000e20 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e204      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xc0>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd f92a 	bl	8000e20 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fd f926 	bl	8000e20 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1f0      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0xe8>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfe:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0a:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d11c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	4b5c      	ldr	r3, [pc, #368]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_RCC_OscConfig+0x152>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1c4      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4952      	ldr	r1, [pc, #328]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	e03a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c58:	4b4f      	ldr	r3, [pc, #316]	; (8003d98 <HAL_RCC_OscConfig+0x2b0>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd f8df 	bl	8000e20 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fd f8db 	bl	8000e20 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e1a5      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4940      	ldr	r1, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b3f      	ldr	r3, [pc, #252]	; (8003d98 <HAL_RCC_OscConfig+0x2b0>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd f8be 	bl	8000e20 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fd f8ba 	bl	8000e20 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e184      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d030      	beq.n	8003d34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCC_OscConfig+0x2b4>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fd f89e 	bl	8000e20 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fd f89a 	bl	8000e20 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e164      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x200>
 8003d06:	e015      	b.n	8003d34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d08:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <HAL_RCC_OscConfig+0x2b4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0e:	f7fd f887 	bl	8000e20 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fd f883 	bl	8000e20 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e14d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a0 	beq.w	8003e82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10f      	bne.n	8003d72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	4a0e      	ldr	r2, [pc, #56]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	6413      	str	r3, [r2, #64]	; 0x40
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x2b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d121      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x2b8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_RCC_OscConfig+0x2b8>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fd f849 	bl	8000e20 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e011      	b.n	8003db6 <HAL_RCC_OscConfig+0x2ce>
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470000 	.word	0x42470000
 8003d9c:	42470e80 	.word	0x42470e80
 8003da0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da4:	f7fd f83c 	bl	8000e20 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e106      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCC_OscConfig+0x4e4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x2f0>
 8003dca:	4b81      	ldr	r3, [pc, #516]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a80      	ldr	r2, [pc, #512]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	e01c      	b.n	8003e12 <HAL_RCC_OscConfig+0x32a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x312>
 8003de0:	4b7b      	ldr	r3, [pc, #492]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	4b78      	ldr	r3, [pc, #480]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a77      	ldr	r2, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x32a>
 8003dfa:	4b75      	ldr	r3, [pc, #468]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a74      	ldr	r2, [pc, #464]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a71      	ldr	r2, [pc, #452]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd f801 	bl	8000e20 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fc fffd 	bl	8000e20 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0c5      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x33a>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fc ffeb 	bl	8000e20 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fc ffe7 	bl	8000e20 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0af      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	4b5a      	ldr	r3, [pc, #360]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4b56      	ldr	r3, [pc, #344]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a55      	ldr	r2, [pc, #340]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 809b 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e8c:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d05c      	beq.n	8003f52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d141      	bne.n	8003f24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <HAL_RCC_OscConfig+0x4ec>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fc ffbb 	bl	8000e20 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fc ffb7 	bl	8000e20 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e081      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec0:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	019b      	lsls	r3, r3, #6
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	4937      	ldr	r1, [pc, #220]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_RCC_OscConfig+0x4ec>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fc ff90 	bl	8000e20 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f04:	f7fc ff8c 	bl	8000e20 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e056      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x41c>
 8003f22:	e04e      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f24:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_RCC_OscConfig+0x4ec>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fc ff79 	bl	8000e20 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fc ff75 	bl	8000e20 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e03f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f44:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x44a>
 8003f50:	e037      	b.n	8003fc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e032      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d028      	beq.n	8003fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d121      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d11a      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f8e:	4013      	ands	r3, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d111      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d107      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	42470060 	.word	0x42470060

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0cc      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d90c      	bls.n	8004014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b63      	ldr	r3, [pc, #396]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0b8      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a58      	ldr	r2, [pc, #352]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800404e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004050:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	494d      	ldr	r1, [pc, #308]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d044      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d119      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e07f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d003      	beq.n	8004096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004092:	2b03      	cmp	r3, #3
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e06f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e067      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4934      	ldr	r1, [pc, #208]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c8:	f7fc feaa 	bl	8000e20 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fc fea6 	bl	8000e20 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e04f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20c      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e032      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4916      	ldr	r1, [pc, #88]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415e:	f000 f821 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 8004162:	4602      	mov	r2, r0
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	490a      	ldr	r1, [pc, #40]	; (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	5ccb      	ldrb	r3, [r1, r3]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc fe0a 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023c00 	.word	0x40023c00
 8004194:	40023800 	.word	0x40023800
 8004198:	08007cd0 	.word	0x08007cd0
 800419c:	20000010 	.word	0x20000010
 80041a0:	20000014 	.word	0x20000014

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041bc:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x40>
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	f200 80bd 	bhi.w	8004348 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x34>
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d003      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x3a>
 80041d6:	e0b7      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b61      	ldr	r3, [pc, #388]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041da:	60bb      	str	r3, [r7, #8]
       break;
 80041dc:	e0b7      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041de:	4b61      	ldr	r3, [pc, #388]	; (8004364 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041e0:	60bb      	str	r3, [r7, #8]
      break;
 80041e2:	e0b4      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e4:	4b5d      	ldr	r3, [pc, #372]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ee:	4b5b      	ldr	r3, [pc, #364]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04d      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fa:	4b58      	ldr	r3, [pc, #352]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	461a      	mov	r2, r3
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800420a:	f04f 0100 	mov.w	r1, #0
 800420e:	ea02 0800 	and.w	r8, r2, r0
 8004212:	ea03 0901 	and.w	r9, r3, r1
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	014b      	lsls	r3, r1, #5
 8004224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004228:	0142      	lsls	r2, r0, #5
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	ebb0 0008 	subs.w	r0, r0, r8
 8004232:	eb61 0109 	sbc.w	r1, r1, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	018b      	lsls	r3, r1, #6
 8004240:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004244:	0182      	lsls	r2, r0, #6
 8004246:	1a12      	subs	r2, r2, r0
 8004248:	eb63 0301 	sbc.w	r3, r3, r1
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	00d9      	lsls	r1, r3, #3
 8004256:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800425a:	00d0      	lsls	r0, r2, #3
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	eb12 0208 	adds.w	r2, r2, r8
 8004264:	eb43 0309 	adc.w	r3, r3, r9
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	0259      	lsls	r1, r3, #9
 8004272:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004276:	0250      	lsls	r0, r2, #9
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4610      	mov	r0, r2
 800427e:	4619      	mov	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	f7fb ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e04a      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	461a      	mov	r2, r3
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	ea02 0400 	and.w	r4, r2, r0
 80042ae:	ea03 0501 	and.w	r5, r3, r1
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	014b      	lsls	r3, r1, #5
 80042c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042c4:	0142      	lsls	r2, r0, #5
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	1b00      	subs	r0, r0, r4
 80042cc:	eb61 0105 	sbc.w	r1, r1, r5
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	018b      	lsls	r3, r1, #6
 80042da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042de:	0182      	lsls	r2, r0, #6
 80042e0:	1a12      	subs	r2, r2, r0
 80042e2:	eb63 0301 	sbc.w	r3, r3, r1
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	00d9      	lsls	r1, r3, #3
 80042f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f4:	00d0      	lsls	r0, r2, #3
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	1912      	adds	r2, r2, r4
 80042fc:	eb45 0303 	adc.w	r3, r5, r3
 8004300:	f04f 0000 	mov.w	r0, #0
 8004304:	f04f 0100 	mov.w	r1, #0
 8004308:	0299      	lsls	r1, r3, #10
 800430a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800430e:	0290      	lsls	r0, r2, #10
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	461a      	mov	r2, r3
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	f7fb ff52 	bl	80001c8 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	3301      	adds	r3, #1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	60bb      	str	r3, [r7, #8]
      break;
 8004346:	e002      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800434a:	60bb      	str	r3, [r7, #8]
      break;
 800434c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434e:	68bb      	ldr	r3, [r7, #8]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000010 	.word	0x20000010

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a9b      	lsrs	r3, r3, #10
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	08007ce0 	.word	0x08007ce0

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d035      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d0:	4b62      	ldr	r3, [pc, #392]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043d6:	f7fc fd23 	bl	8000e20 <HAL_GetTick>
 80043da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043de:	f7fc fd1f 	bl	8000e20 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0b0      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f0:	4b5b      	ldr	r3, [pc, #364]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	019a      	lsls	r2, r3, #6
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4955      	ldr	r1, [pc, #340]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004410:	4b52      	ldr	r3, [pc, #328]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004416:	f7fc fd03 	bl	8000e20 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800441e:	f7fc fcff 	bl	8000e20 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e090      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8083 	beq.w	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	4b44      	ldr	r3, [pc, #272]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a43      	ldr	r2, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004472:	f7fc fcd5 	bl	8000e20 <HAL_GetTick>
 8004476:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fc fcd1 	bl	8000e20 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e062      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004498:	4b31      	ldr	r3, [pc, #196]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d028      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044c0:	4b29      	ldr	r3, [pc, #164]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d114      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044de:	f7fc fc9f 	bl	8000e20 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fc fc9b 	bl	8000e20 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e02a      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ee      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d10d      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	490d      	ldr	r1, [pc, #52]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
 8004530:	e005      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004538:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800453c:	6093      	str	r3, [r2, #8]
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454a:	4905      	ldr	r1, [pc, #20]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	42470068 	.word	0x42470068
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	42470e40 	.word	0x42470e40

0800456c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13e      	bne.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d12f      	bne.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a2:	617b      	str	r3, [r7, #20]
          break;
 80045a4:	e02f      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045a6:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d108      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045b4:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e007      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f0:	0f1b      	lsrs	r3, r3, #28
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
          break;
 80045fe:	e002      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
          break;
 8004604:	bf00      	nop
        }
      }
      break;
 8004606:	bf00      	nop
    }
  }
  return frequency;
 8004608:	697b      	ldr	r3, [r7, #20]
}
 800460a:	4618      	mov	r0, r3
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	00bb8000 	.word	0x00bb8000
 8004620:	007a1200 	.word	0x007a1200
 8004624:	00f42400 	.word	0x00f42400

08004628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e07b      	b.n	8004732 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800464a:	d009      	beq.n	8004660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	61da      	str	r2, [r3, #28]
 8004652:	e005      	b.n	8004660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fa54 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004696:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f003 0104 	and.w	r1, r3, #4
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0210 	and.w	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800473a:	b084      	sub	sp, #16
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	f107 001c 	add.w	r0, r7, #28
 8004748:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d122      	bne.n	8004798 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f99f 	bl	8004ad0 <USB_CoreReset>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e01a      	b.n	80047ce <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f993 	bl	8004ad0 <USB_CoreReset>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
 80047c0:	e005      	b.n	80047ce <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d10b      	bne.n	80047ec <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f043 0206 	orr.w	r2, r3, #6
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047f8:	b004      	add	sp, #16
 80047fa:	4770      	bx	lr

080047fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d115      	bne.n	800488e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800486e:	2001      	movs	r0, #1
 8004870:	f7fc fae2 	bl	8000e38 <HAL_Delay>
      ms++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f919 	bl	8004ab2 <USB_GetMode>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d01e      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b31      	cmp	r3, #49	; 0x31
 800488a:	d9f0      	bls.n	800486e <USB_SetCurrentMode+0x2e>
 800488c:	e01a      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d115      	bne.n	80048c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fc fac9 	bl	8000e38 <HAL_Delay>
      ms++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f900 	bl	8004ab2 <USB_GetMode>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <USB_SetCurrentMode+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b31      	cmp	r3, #49	; 0x31
 80048bc:	d9f0      	bls.n	80048a0 <USB_SetCurrentMode+0x60>
 80048be:	e001      	b.n	80048c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e005      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b32      	cmp	r3, #50	; 0x32
 80048c8:	d101      	bne.n	80048ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	f043 0220 	orr.w	r2, r3, #32
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3301      	adds	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <USB_FlushTxFifo+0x44>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e006      	b.n	8004910 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b20      	cmp	r3, #32
 800490c:	d0f1      	beq.n	80048f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	00030d40 	.word	0x00030d40

08004920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2210      	movs	r2, #16
 8004930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	4a08      	ldr	r2, [pc, #32]	; (800495c <USB_FlushRxFifo+0x3c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e006      	b.n	8004950 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d0f1      	beq.n	8004932 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	00030d40 	.word	0x00030d40

08004960 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	4611      	mov	r1, r2
 800496c:	461a      	mov	r2, r3
 800496e:	460b      	mov	r3, r1
 8004970:	71fb      	strb	r3, [r7, #7]
 8004972:	4613      	mov	r3, r2
 8004974:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800497e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d123      	bne.n	80049ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004986:	88bb      	ldrh	r3, [r7, #4]
 8004988:	3303      	adds	r3, #3
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e018      	b.n	80049c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	031a      	lsls	r2, r3, #12
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	4413      	add	r3, r2
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	461a      	mov	r2, r3
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	3301      	adds	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	3301      	adds	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3e2      	bcc.n	8004994 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3724      	adds	r7, #36	; 0x24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049dc:	b480      	push	{r7}
 80049de:	b08b      	sub	sp, #44	; 0x2c
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
 8004a06:	e014      	b.n	8004a32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	3301      	adds	r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	3301      	adds	r3, #1
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	3301      	adds	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	6a3a      	ldr	r2, [r7, #32]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3e6      	bcc.n	8004a08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a3a:	8bfb      	ldrh	r3, [r7, #30]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	701a      	strb	r2, [r3, #0]
      i++;
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	3301      	adds	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a72:	8bfb      	ldrh	r3, [r7, #30]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a78:	8bfb      	ldrh	r3, [r7, #30]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ea      	bne.n	8004a54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	372c      	adds	r7, #44	; 0x2c
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0301 	and.w	r3, r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <USB_CoreReset+0x60>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e01a      	b.n	8004b22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	daf3      	bge.n	8004adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <USB_CoreReset+0x60>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d0f1      	beq.n	8004b04 <USB_CoreReset+0x34>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	00030d40 	.word	0x00030d40

08004b34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b34:	b084      	sub	sp, #16
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	f107 001c 	add.w	r0, r7, #28
 8004b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10a      	bne.n	8004ba2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e014      	b.n	8004bcc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bb0:	f023 0304 	bic.w	r3, r3, #4
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e009      	b.n	8004bcc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004bcc:	2110      	movs	r1, #16
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fe82 	bl	80048d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fea3 	bl	8004920 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e015      	b.n	8004c0c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bec:	461a      	mov	r2, r3
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	461a      	mov	r2, r3
 8004c02:	2300      	movs	r3, #0
 8004c04:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3e5      	bcc.n	8004be0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c20:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <USB_HostInit+0x154>)
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <USB_HostInit+0x158>)
 8004c40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c44:	e009      	b.n	8004c5a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <USB_HostInit+0x15c>)
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <USB_HostInit+0x160>)
 8004c56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <USB_HostInit+0x164>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c84:	b004      	add	sp, #16
 8004c86:	4770      	bx	lr
 8004c88:	01000200 	.word	0x01000200
 8004c8c:	00e00300 	.word	0x00e00300
 8004c90:	00600080 	.word	0x00600080
 8004c94:	004000e0 	.word	0x004000e0
 8004c98:	a3200008 	.word	0xa3200008

08004c9c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d107      	bne.n	8004cee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004cea:	6053      	str	r3, [r2, #4]
 8004cec:	e009      	b.n	8004d02 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d106      	bne.n	8004d02 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d00:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d40:	2064      	movs	r0, #100	; 0x64
 8004d42:	f7fc f879 	bl	8000e38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d52:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d54:	200a      	movs	r0, #10
 8004d56:	f7fc f86f 	bl	8000e38 <HAL_Delay>

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d88:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <USB_DriveVbus+0x44>
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d106      	bne.n	8004da8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004da6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	d109      	bne.n	8004dc8 <USB_DriveVbus+0x64>
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dc6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	0c5b      	lsrs	r3, r3, #17
 8004df4:	f003 0303 	and.w	r3, r3, #3
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	b29b      	uxth	r3, r3
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4603      	mov	r3, r0
 8004e38:	70fb      	strb	r3, [r7, #3]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70bb      	strb	r3, [r7, #2]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	461a      	mov	r2, r3
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d87e      	bhi.n	8004f64 <USB_HC_Init+0x13c>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <USB_HC_Init+0x44>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004f27 	.word	0x08004f27
 8004e74:	08004e7d 	.word	0x08004e7d
 8004e78:	08004ee9 	.word	0x08004ee9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da10      	bge.n	8004eba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004eb8:	e057      	b.n	8004f6a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d051      	beq.n	8004f6a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ee0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ee4:	60d3      	str	r3, [r2, #12]
      break;
 8004ee6:	e040      	b.n	8004f6a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004efa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004efc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da34      	bge.n	8004f6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f22:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f24:	e023      	b.n	8004f6e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	f240 2325 	movw	r3, #549	; 0x225
 8004f38:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da17      	bge.n	8004f72 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f60:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f62:	e006      	b.n	8004f72 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	77fb      	strb	r3, [r7, #31]
      break;
 8004f68:	e004      	b.n	8004f74 <USB_HC_Init+0x14c>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <USB_HC_Init+0x14c>
      break;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <USB_HC_Init+0x14c>
      break;
 8004f72:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	2101      	movs	r1, #1
 8004f84:	fa01 f303 	lsl.w	r3, r1, r3
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da03      	bge.n	8004fae <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e001      	b.n	8004fb2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff0f 	bl	8004dd6 <USB_GetHostSpeed>
 8004fb8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d106      	bne.n	8004fd0 <USB_HC_Init+0x1a8>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d003      	beq.n	8004fd0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e001      	b.n	8004fd4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fd4:	787b      	ldrb	r3, [r7, #1]
 8004fd6:	059b      	lsls	r3, r3, #22
 8004fd8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fdc:	78bb      	ldrb	r3, [r7, #2]
 8004fde:	02db      	lsls	r3, r3, #11
 8004fe0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fe4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fea:	049b      	lsls	r3, r3, #18
 8004fec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ff0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ff8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	0159      	lsls	r1, r3, #5
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	440b      	add	r3, r1
 8005006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005010:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005016:	2b03      	cmp	r3, #3
 8005018:	d10f      	bne.n	800503a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005038:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800503a:	7ffb      	ldrb	r3, [r7, #31]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3720      	adds	r7, #32
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08c      	sub	sp, #48	; 0x30
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800505c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005060:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d02d      	beq.n	80050ca <USB_HC_StartXfer+0x86>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d129      	bne.n	80050ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d117      	bne.n	80050ac <USB_HC_StartXfer+0x68>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	79db      	ldrb	r3, [r3, #7]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <USB_HC_StartXfer+0x48>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	79db      	ldrb	r3, [r3, #7]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d10f      	bne.n	80050ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10b      	bne.n	80050ca <USB_HC_StartXfer+0x86>
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	795b      	ldrb	r3, [r3, #5]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	4619      	mov	r1, r3
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fa2f 	bl	8005524 <USB_DoPing>
      return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e0f8      	b.n	80052bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	8912      	ldrh	r2, [r2, #8]
 80050da:	4413      	add	r3, r2
 80050dc:	3b01      	subs	r3, #1
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	8912      	ldrh	r2, [r2, #8]
 80050e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80050e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050ea:	8b7b      	ldrh	r3, [r7, #26]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d90b      	bls.n	8005108 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80050f0:	8b7b      	ldrh	r3, [r7, #26]
 80050f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	8912      	ldrh	r2, [r2, #8]
 80050fa:	fb02 f203 	mul.w	r2, r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	611a      	str	r2, [r3, #16]
 8005102:	e001      	b.n	8005108 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005104:	2301      	movs	r3, #1
 8005106:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	78db      	ldrb	r3, [r3, #3]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	8912      	ldrh	r2, [r2, #8]
 8005116:	fb02 f203 	mul.w	r2, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	e003      	b.n	8005128 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005132:	04d9      	lsls	r1, r3, #19
 8005134:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <USB_HC_StartXfer+0x280>)
 8005136:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005138:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	7a9b      	ldrb	r3, [r3, #10]
 800513e:	075b      	lsls	r3, r3, #29
 8005140:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005144:	69f9      	ldr	r1, [r7, #28]
 8005146:	0148      	lsls	r0, r1, #5
 8005148:	6a39      	ldr	r1, [r7, #32]
 800514a:	4401      	add	r1, r0
 800514c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005150:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005152:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	68d9      	ldr	r1, [r3, #12]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	4413      	add	r3, r2
 8005166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516a:	460a      	mov	r2, r1
 800516c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	7e7b      	ldrb	r3, [r7, #25]
 80051b6:	075b      	lsls	r3, r3, #29
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	0148      	lsls	r0, r1, #5
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	4401      	add	r1, r0
 80051c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051c4:	4313      	orrs	r3, r2
 80051c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	78db      	ldrb	r3, [r3, #3]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	e003      	b.n	80051fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005200:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	461a      	mov	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e04e      	b.n	80052bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d149      	bne.n	80052ba <USB_HC_StartXfer+0x276>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d045      	beq.n	80052ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	79db      	ldrb	r3, [r3, #7]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d830      	bhi.n	8005298 <USB_HC_StartXfer+0x254>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <USB_HC_StartXfer+0x1f8>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	0800524d 	.word	0x0800524d
 8005240:	08005271 	.word	0x08005271
 8005244:	0800524d 	.word	0x0800524d
 8005248:	08005271 	.word	0x08005271
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	3303      	adds	r3, #3
 8005252:	089b      	lsrs	r3, r3, #2
 8005254:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005256:	8afa      	ldrh	r2, [r7, #22]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	b29b      	uxth	r3, r3
 800525e:	429a      	cmp	r2, r3
 8005260:	d91c      	bls.n	800529c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	619a      	str	r2, [r3, #24]
        }
        break;
 800526e:	e015      	b.n	800529c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	3303      	adds	r3, #3
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800527a:	8afa      	ldrh	r2, [r7, #22]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	b29b      	uxth	r3, r3
 8005286:	429a      	cmp	r2, r3
 8005288:	d90a      	bls.n	80052a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	619a      	str	r2, [r3, #24]
        }
        break;
 8005296:	e003      	b.n	80052a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <USB_HC_StartXfer+0x25e>
        break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <USB_HC_StartXfer+0x25e>
        break;
 80052a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	68d9      	ldr	r1, [r3, #12]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785a      	ldrb	r2, [r3, #1]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2000      	movs	r0, #0
 80052b2:	9000      	str	r0, [sp, #0]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff fb53 	bl	8004960 <USB_WritePacket>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	; 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	1ff80000 	.word	0x1ff80000

080052c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	b29b      	uxth	r3, r3
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b089      	sub	sp, #36	; 0x24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0fdb      	lsrs	r3, r3, #31
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b20      	cmp	r3, #32
 8005338:	d104      	bne.n	8005344 <USB_HC_Halt+0x5a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e0e8      	b.n	8005516 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <USB_HC_Halt+0x66>
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d173      	bne.n	8005438 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	440a      	add	r2, r1
 8005366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800536e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 80cb 	bne.w	8005514 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d143      	bne.n	8005412 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	4413      	add	r3, r2
 8005392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3301      	adds	r3, #1
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f6:	d81d      	bhi.n	8005434 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540e:	d0ec      	beq.n	80053ea <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005410:	e080      	b.n	8005514 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	440a      	add	r2, r1
 8005428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005430:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005432:	e06f      	b.n	8005514 <USB_HC_Halt+0x22a>
            break;
 8005434:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005436:	e06d      	b.n	8005514 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	440a      	add	r2, r1
 800544e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005456:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d143      	bne.n	80054f0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	440a      	add	r2, r1
 800547e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005486:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	440a      	add	r2, r1
 800549e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054d4:	d81d      	bhi.n	8005512 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ec:	d0ec      	beq.n	80054c8 <USB_HC_Halt+0x1de>
 80054ee:	e011      	b.n	8005514 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	440a      	add	r2, r1
 8005506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	e000      	b.n	8005514 <USB_HC_Halt+0x22a>
          break;
 8005512:	bf00      	nop
    }
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005538:	2301      	movs	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	04da      	lsls	r2, r3, #19
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <USB_DoPing+0x74>)
 8005542:	4013      	ands	r3, r2
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005554:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800556c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005574:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	1ff80000 	.word	0x1ff80000

0800559c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff f936 	bl	800481e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80055b2:	2110      	movs	r1, #16
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff f98f 	bl	80048d8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff f9b0 	bl	8004920 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e01f      	b.n	8005606 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fa:	461a      	mov	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3301      	adds	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b0f      	cmp	r3, #15
 800560a:	d9dc      	bls.n	80055c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e034      	b.n	800567c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005628:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005630:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005638:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005658:	d80c      	bhi.n	8005674 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d0ec      	beq.n	800564c <USB_StopHost+0xb0>
 8005672:	e000      	b.n	8005676 <USB_StopHost+0xda>
        break;
 8005674:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d9c7      	bls.n	8005612 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005688:	461a      	mov	r2, r3
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff f8af 	bl	80047fc <USB_EnableGlobalInt>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af04      	add	r7, sp, #16
 80056ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056b0:	2301      	movs	r3, #1
 80056b2:	2202      	movs	r2, #2
 80056b4:	2102      	movs	r1, #2
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fc66 	bl	8005f88 <USBH_FindInterface>
 80056bc:	4603      	mov	r3, r0
 80056be:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2bff      	cmp	r3, #255	; 0xff
 80056c4:	d002      	beq.n	80056cc <USBH_CDC_InterfaceInit+0x24>
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d901      	bls.n	80056d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056cc:	2302      	movs	r3, #2
 80056ce:	e13d      	b.n	800594c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fc3b 	bl	8005f50 <USBH_SelectInterface>
 80056da:	4603      	mov	r3, r0
 80056dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80056e4:	2302      	movs	r3, #2
 80056e6:	e131      	b.n	800594c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056ee:	2050      	movs	r0, #80	; 0x50
 80056f0:	f002 fa00 	bl	8007af4 <malloc>
 80056f4:	4603      	mov	r3, r0
 80056f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005708:	2302      	movs	r3, #2
 800570a:	e11f      	b.n	800594c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800570c:	2250      	movs	r2, #80	; 0x50
 800570e:	2100      	movs	r1, #0
 8005710:	68b8      	ldr	r0, [r7, #8]
 8005712:	f002 f9ff 	bl	8007b14 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	211a      	movs	r1, #26
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b25b      	sxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	da15      	bge.n	800575a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	211a      	movs	r1, #26
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	211a      	movs	r1, #26
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 fe32 	bl	80073ca <USBH_AllocPipe>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	7819      	ldrb	r1, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7858      	ldrb	r0, [r3, #1]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	8952      	ldrh	r2, [r2, #10]
 8005786:	9202      	str	r2, [sp, #8]
 8005788:	2203      	movs	r2, #3
 800578a:	9201      	str	r2, [sp, #4]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	4623      	mov	r3, r4
 8005790:	4602      	mov	r2, r0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 fdea 	bl	800736c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	4619      	mov	r1, r3
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f002 f8f9 	bl	8007998 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80057a6:	2300      	movs	r3, #0
 80057a8:	2200      	movs	r2, #0
 80057aa:	210a      	movs	r1, #10
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fbeb 	bl	8005f88 <USBH_FindInterface>
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2bff      	cmp	r3, #255	; 0xff
 80057ba:	d002      	beq.n	80057c2 <USBH_CDC_InterfaceInit+0x11a>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d901      	bls.n	80057c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057c2:	2302      	movs	r3, #2
 80057c4:	e0c2      	b.n	800594c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	211a      	movs	r1, #26
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	4413      	add	r3, r2
 80057d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da16      	bge.n	800580c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	211a      	movs	r1, #26
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	4413      	add	r3, r2
 80057ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	211a      	movs	r1, #26
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	4413      	add	r3, r2
 8005800:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	835a      	strh	r2, [r3, #26]
 800580a:	e015      	b.n	8005838 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	211a      	movs	r1, #26
 8005812:	fb01 f303 	mul.w	r3, r1, r3
 8005816:	4413      	add	r3, r2
 8005818:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	211a      	movs	r1, #26
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	211a      	movs	r1, #26
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	4413      	add	r3, r2
 8005844:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b25b      	sxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	da16      	bge.n	800587e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	211a      	movs	r1, #26
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	4413      	add	r3, r2
 800585c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	211a      	movs	r1, #26
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	4413      	add	r3, r2
 8005872:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	835a      	strh	r2, [r3, #26]
 800587c:	e015      	b.n	80058aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	211a      	movs	r1, #26
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	4413      	add	r3, r2
 800588a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	211a      	movs	r1, #26
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	4413      	add	r3, r2
 80058a0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	7b9b      	ldrb	r3, [r3, #14]
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fd8a 	bl	80073ca <USBH_AllocPipe>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	7bdb      	ldrb	r3, [r3, #15]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fd80 	bl	80073ca <USBH_AllocPipe>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	7b59      	ldrb	r1, [r3, #13]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	7b98      	ldrb	r0, [r3, #14]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	8b12      	ldrh	r2, [r2, #24]
 80058ea:	9202      	str	r2, [sp, #8]
 80058ec:	2202      	movs	r2, #2
 80058ee:	9201      	str	r2, [sp, #4]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4623      	mov	r3, r4
 80058f4:	4602      	mov	r2, r0
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 fd38 	bl	800736c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	7b19      	ldrb	r1, [r3, #12]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	7bd8      	ldrb	r0, [r3, #15]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	8b52      	ldrh	r2, [r2, #26]
 8005914:	9202      	str	r2, [sp, #8]
 8005916:	2202      	movs	r2, #2
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4623      	mov	r3, r4
 800591e:	4602      	mov	r2, r0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fd23 	bl	800736c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	7b5b      	ldrb	r3, [r3, #13]
 8005932:	2200      	movs	r2, #0
 8005934:	4619      	mov	r1, r3
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f002 f82e 	bl	8007998 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	7b1b      	ldrb	r3, [r3, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f002 f827 	bl	8007998 <USBH_LL_SetToggle>

  return USBH_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	bd90      	pop	{r4, r7, pc}

08005954 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 fd18 	bl	80073aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fd43 	bl	800740c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	7b1b      	ldrb	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00e      	beq.n	80059b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	7b1b      	ldrb	r3, [r3, #12]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fd05 	bl	80073aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	7b1b      	ldrb	r3, [r3, #12]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fd30 	bl	800740c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	7b5b      	ldrb	r3, [r3, #13]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00e      	beq.n	80059d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	7b5b      	ldrb	r3, [r3, #13]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fcf2 	bl	80073aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	7b5b      	ldrb	r3, [r3, #13]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fd1d 	bl	800740c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 f889 	bl	8007b04 <free>
    phost->pActiveClass->pData = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059f8:	2200      	movs	r2, #0
 80059fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3340      	adds	r3, #64	; 0x40
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8b1 	bl	8005b86 <GetLineCoding>
 8005a24:	4603      	mov	r3, r0
 8005a26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a28:	7afb      	ldrb	r3, [r7, #11]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d105      	bne.n	8005a3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a34:	2102      	movs	r1, #2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d877      	bhi.n	8005b58 <USBH_CDC_Process+0x114>
 8005a68:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <USBH_CDC_Process+0x2c>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005a85 	.word	0x08005a85
 8005a74:	08005a8b 	.word	0x08005a8b
 8005a78:	08005abb 	.word	0x08005abb
 8005a7c:	08005b2f 	.word	0x08005b2f
 8005a80:	08005b3d 	.word	0x08005b3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
      break;
 8005a88:	e06d      	b.n	8005b66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f897 	bl	8005bc4 <SetLineCoding>
 8005a96:	4603      	mov	r3, r0
 8005a98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005aa8:	e058      	b.n	8005b5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d055      	beq.n	8005b5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ab8:	e050      	b.n	8005b5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3340      	adds	r3, #64	; 0x40
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f860 	bl	8005b86 <GetLineCoding>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d126      	bne.n	8005b1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d13b      	bne.n	8005b60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d133      	bne.n	8005b60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d12b      	bne.n	8005b60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d124      	bne.n	8005b60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f958 	bl	8005dcc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b1c:	e020      	b.n	8005b60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b1e:	7bbb      	ldrb	r3, [r7, #14]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d01d      	beq.n	8005b60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2204      	movs	r2, #4
 8005b28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b2c:	e018      	b.n	8005b60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f867 	bl	8005c02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8da 	bl	8005cee <CDC_ProcessReception>
      break;
 8005b3a:	e014      	b.n	8005b66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 ffe3 	bl	8006b0a <USBH_ClrFeature>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b56:	e005      	b.n	8005b64 <USBH_CDC_Process+0x120>

    default:
      break;
 8005b58:	bf00      	nop
 8005b5a:	e004      	b.n	8005b66 <USBH_CDC_Process+0x122>
      break;
 8005b5c:	bf00      	nop
 8005b5e:	e002      	b.n	8005b66 <USBH_CDC_Process+0x122>
      break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <USBH_CDC_Process+0x122>
      break;
 8005b64:	bf00      	nop

  }

  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	22a1      	movs	r2, #161	; 0xa1
 8005b94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2221      	movs	r2, #33	; 0x21
 8005b9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2207      	movs	r2, #7
 8005bac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f988 	bl	8006eca <USBH_CtlReq>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2221      	movs	r2, #33	; 0x21
 8005bd2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2207      	movs	r2, #7
 8005bea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2207      	movs	r2, #7
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 f969 	bl	8006eca <USBH_CtlReq>
 8005bf8:	4603      	mov	r3, r0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af02      	add	r7, sp, #8
 8005c08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d002      	beq.n	8005c28 <CDC_ProcessTransmission+0x26>
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d023      	beq.n	8005c6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c26:	e05e      	b.n	8005ce6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	8b12      	ldrh	r2, [r2, #24]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d90b      	bls.n	8005c4c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8b1a      	ldrh	r2, [r3, #24]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7b5b      	ldrb	r3, [r3, #13]
 8005c40:	2001      	movs	r0, #1
 8005c42:	9000      	str	r0, [sp, #0]
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fb4e 	bl	80072e6 <USBH_BulkSendData>
 8005c4a:	e00b      	b.n	8005c64 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	7b5b      	ldrb	r3, [r3, #13]
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	9000      	str	r0, [sp, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fb41 	bl	80072e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c6c:	e03b      	b.n	8005ce6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	7b5b      	ldrb	r3, [r3, #13]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fe65 	bl	8007944 <USBH_LL_GetURBState>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d128      	bne.n	8005cd6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	8b12      	ldrh	r2, [r2, #24]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d90e      	bls.n	8005cae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	8b12      	ldrh	r2, [r2, #24]
 8005c98:	1a9a      	subs	r2, r3, r2
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	8b12      	ldrh	r2, [r2, #24]
 8005ca6:	441a      	add	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	61da      	str	r2, [r3, #28]
 8005cac:	e002      	b.n	8005cb4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cc4:	e00e      	b.n	8005ce4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f868 	bl	8005da4 <USBH_CDC_TransmitCallback>
      break;
 8005cd4:	e006      	b.n	8005ce4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005cd6:	7afb      	ldrb	r3, [r7, #11]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d103      	bne.n	8005ce4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ce4:	bf00      	nop
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d002      	beq.n	8005d14 <CDC_ProcessReception+0x26>
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d00e      	beq.n	8005d30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d12:	e043      	b.n	8005d9c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	6a19      	ldr	r1, [r3, #32]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	8b5a      	ldrh	r2, [r3, #26]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	7b1b      	ldrb	r3, [r3, #12]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 fb05 	bl	8007330 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d2e:	e035      	b.n	8005d9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	7b1b      	ldrb	r3, [r3, #12]
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fe04 	bl	8007944 <USBH_LL_GetURBState>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d40:	7cfb      	ldrb	r3, [r7, #19]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d129      	bne.n	8005d9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	7b1b      	ldrb	r3, [r3, #12]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f001 fd67 	bl	8007820 <USBH_LL_GetLastXferSize>
 8005d52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d016      	beq.n	8005d8c <CDC_ProcessReception+0x9e>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	8b5b      	ldrh	r3, [r3, #26]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d910      	bls.n	8005d8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2203      	movs	r2, #3
 8005d86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d8a:	e006      	b.n	8005d9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f80f 	bl	8005db8 <USBH_CDC_ReceiveCallback>
      break;
 8005d9a:	bf00      	nop
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005df4:	2302      	movs	r3, #2
 8005df6:	e029      	b.n	8005e4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	79fa      	ldrb	r2, [r7, #7]
 8005dfc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f81f 	bl	8005e54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f001 fc37 	bl	80076b8 <USBH_LL_Init>

  return USBH_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
 8005e64:	e009      	b.n	8005e7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	33e0      	adds	r3, #224	; 0xe0
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b0e      	cmp	r3, #14
 8005e7e:	d9f2      	bls.n	8005e66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e009      	b.n	8005e9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d3f1      	bcc.n	8005e86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2240      	movs	r2, #64	; 0x40
 8005ec6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d016      	beq.n	8005f3e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10e      	bne.n	8005f38 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f20:	1c59      	adds	r1, r3, #1
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	33de      	adds	r3, #222	; 0xde
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	e004      	b.n	8005f42 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e001      	b.n	8005f42 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d204      	bcs.n	8005f76 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f74:	e001      	b.n	8005f7a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f76:	2302      	movs	r3, #2
 8005f78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	70fb      	strb	r3, [r7, #3]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70bb      	strb	r3, [r7, #2]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fb0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fb2:	e025      	b.n	8006000 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
 8005fb6:	221a      	movs	r2, #26
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	795b      	ldrb	r3, [r3, #5]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d002      	beq.n	8005fd6 <USBH_FindInterface+0x4e>
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	2bff      	cmp	r3, #255	; 0xff
 8005fd4:	d111      	bne.n	8005ffa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fda:	78ba      	ldrb	r2, [r7, #2]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fe0:	78bb      	ldrb	r3, [r7, #2]
 8005fe2:	2bff      	cmp	r3, #255	; 0xff
 8005fe4:	d109      	bne.n	8005ffa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fea:	787a      	ldrb	r2, [r7, #1]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d002      	beq.n	8005ff6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ff0:	787b      	ldrb	r3, [r7, #1]
 8005ff2:	2bff      	cmp	r3, #255	; 0xff
 8005ff4:	d101      	bne.n	8005ffa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	e006      	b.n	8006008 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d9d6      	bls.n	8005fb4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006006:	23ff      	movs	r3, #255	; 0xff
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 fb87 	bl	8007730 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006022:	2101      	movs	r1, #1
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fca0 	bl	800796a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af04      	add	r7, sp, #16
 800603a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800603c:	2302      	movs	r3, #2
 800603e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d102      	bne.n	8006056 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2203      	movs	r2, #3
 8006054:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b0b      	cmp	r3, #11
 800605e:	f200 81b3 	bhi.w	80063c8 <USBH_Process+0x394>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <USBH_Process+0x34>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006099 	.word	0x08006099
 800606c:	080060cb 	.word	0x080060cb
 8006070:	08006133 	.word	0x08006133
 8006074:	08006363 	.word	0x08006363
 8006078:	080063c9 	.word	0x080063c9
 800607c:	080061d7 	.word	0x080061d7
 8006080:	08006309 	.word	0x08006309
 8006084:	0800620d 	.word	0x0800620d
 8006088:	0800622d 	.word	0x0800622d
 800608c:	0800624d 	.word	0x0800624d
 8006090:	0800627b 	.word	0x0800627b
 8006094:	0800634b 	.word	0x0800634b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8193 	beq.w	80063cc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80060ac:	20c8      	movs	r0, #200	; 0xc8
 80060ae:	f001 fca3 	bl	80079f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fb99 	bl	80077ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060c8:	e180      	b.n	80063cc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060e2:	e182      	b.n	80063ea <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ee:	d914      	bls.n	800611a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80060f6:	3301      	adds	r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006106:	2b03      	cmp	r3, #3
 8006108:	d903      	bls.n	8006112 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	220d      	movs	r2, #13
 800610e:	701a      	strb	r2, [r3, #0]
      break;
 8006110:	e16b      	b.n	80063ea <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
      break;
 8006118:	e167      	b.n	80063ea <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006120:	f103 020a 	add.w	r2, r3, #10
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800612a:	200a      	movs	r0, #10
 800612c:	f001 fc64 	bl	80079f8 <USBH_Delay>
      break;
 8006130:	e15b      	b.n	80063ea <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006142:	2104      	movs	r1, #4
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006148:	2064      	movs	r0, #100	; 0x64
 800614a:	f001 fc55 	bl	80079f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fb24 	bl	800779c <USBH_LL_GetSpeed>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2205      	movs	r2, #5
 8006162:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 f92f 	bl	80073ca <USBH_AllocPipe>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 f927 	bl	80073ca <USBH_AllocPipe>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7919      	ldrb	r1, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006198:	b292      	uxth	r2, r2
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	9201      	str	r2, [sp, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	4603      	mov	r3, r0
 80061a4:	2280      	movs	r2, #128	; 0x80
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f001 f8e0 	bl	800736c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7959      	ldrb	r1, [r3, #5]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061c0:	b292      	uxth	r2, r2
 80061c2:	9202      	str	r2, [sp, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	9201      	str	r2, [sp, #4]
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	4603      	mov	r3, r0
 80061cc:	2200      	movs	r2, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f8cc 	bl	800736c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061d4:	e109      	b.n	80063ea <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f90c 	bl	80063f4 <USBH_HandleEnum>
 80061dc:	4603      	mov	r3, r0
 80061de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 80f3 	bne.w	80063d0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d103      	bne.n	8006204 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2208      	movs	r2, #8
 8006200:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006202:	e0e5      	b.n	80063d0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2207      	movs	r2, #7
 8006208:	701a      	strb	r2, [r3, #0]
      break;
 800620a:	e0e1      	b.n	80063d0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80de 	beq.w	80063d4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2208      	movs	r2, #8
 8006228:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800622a:	e0d3      	b.n	80063d4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006232:	b29b      	uxth	r3, r3
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fc20 	bl	8006a7c <USBH_SetCfg>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 80ca 	bne.w	80063d8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2209      	movs	r2, #9
 8006248:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800624a:	e0c5      	b.n	80063d8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800625a:	2101      	movs	r1, #1
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fc30 	bl	8006ac2 <USBH_SetFeature>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 80b9 	bne.w	80063dc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	220a      	movs	r2, #10
 800626e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006270:	e0b4      	b.n	80063dc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	220a      	movs	r2, #10
 8006276:	701a      	strb	r2, [r3, #0]
      break;
 8006278:	e0b0      	b.n	80063dc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 80ad 	beq.w	80063e0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
 8006292:	e016      	b.n	80062c2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32de      	adds	r2, #222	; 0xde
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	791a      	ldrb	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d108      	bne.n	80062bc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80062aa:	7bfa      	ldrb	r2, [r7, #15]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	32de      	adds	r2, #222	; 0xde
 80062b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80062ba:	e005      	b.n	80062c8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	3301      	adds	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0e5      	beq.n	8006294 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d109      	bne.n	80062f8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2206      	movs	r2, #6
 80062e8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062f0:	2103      	movs	r1, #3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062f6:	e073      	b.n	80063e0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	220d      	movs	r2, #13
 80062fc:	701a      	strb	r2, [r3, #0]
      break;
 80062fe:	e06f      	b.n	80063e0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	220d      	movs	r2, #13
 8006304:	701a      	strb	r2, [r3, #0]
      break;
 8006306:	e06b      	b.n	80063e0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d017      	beq.n	8006342 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	4798      	blx	r3
 800631e:	4603      	mov	r3, r0
 8006320:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	220b      	movs	r2, #11
 800632e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006330:	e058      	b.n	80063e4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d154      	bne.n	80063e4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	220d      	movs	r2, #13
 800633e:	701a      	strb	r2, [r3, #0]
      break;
 8006340:	e050      	b.n	80063e4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	220d      	movs	r2, #13
 8006346:	701a      	strb	r2, [r3, #0]
      break;
 8006348:	e04c      	b.n	80063e4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d049      	beq.n	80063e8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      }
      break;
 8006360:	e042      	b.n	80063e8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff fd72 	bl	8005e54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800639e:	2105      	movs	r1, #5
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d107      	bne.n	80063c0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff fe2b 	bl	8006014 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063be:	e014      	b.n	80063ea <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f9b5 	bl	8007730 <USBH_LL_Start>
      break;
 80063c6:	e010      	b.n	80063ea <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80063c8:	bf00      	nop
 80063ca:	e00e      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063cc:	bf00      	nop
 80063ce:	e00c      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063d0:	bf00      	nop
 80063d2:	e00a      	b.n	80063ea <USBH_Process+0x3b6>
    break;
 80063d4:	bf00      	nop
 80063d6:	e008      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063d8:	bf00      	nop
 80063da:	e006      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063dc:	bf00      	nop
 80063de:	e004      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063e0:	bf00      	nop
 80063e2:	e002      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063e4:	bf00      	nop
 80063e6:	e000      	b.n	80063ea <USBH_Process+0x3b6>
      break;
 80063e8:	bf00      	nop
  }
  return USBH_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006400:	2301      	movs	r3, #1
 8006402:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	2b07      	cmp	r3, #7
 800640a:	f200 81c1 	bhi.w	8006790 <USBH_HandleEnum+0x39c>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USBH_HandleEnum+0x20>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006435 	.word	0x08006435
 8006418:	080064f3 	.word	0x080064f3
 800641c:	0800655d 	.word	0x0800655d
 8006420:	080065eb 	.word	0x080065eb
 8006424:	08006655 	.word	0x08006655
 8006428:	080066c5 	.word	0x080066c5
 800642c:	0800670b 	.word	0x0800670b
 8006430:	08006751 	.word	0x08006751
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006434:	2108      	movs	r1, #8
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa50 	bl	80068dc <USBH_Get_DevDesc>
 800643c:	4603      	mov	r3, r0
 800643e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d130      	bne.n	80064a8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7919      	ldrb	r1, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800646a:	b292      	uxth	r2, r2
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	9201      	str	r2, [sp, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4603      	mov	r3, r0
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 ff77 	bl	800736c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7959      	ldrb	r1, [r3, #5]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006492:	b292      	uxth	r2, r2
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	4603      	mov	r3, r0
 800649e:	2200      	movs	r2, #0
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 ff63 	bl	800736c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064a6:	e175      	b.n	8006794 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f040 8172 	bne.w	8006794 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064b6:	3301      	adds	r3, #1
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d903      	bls.n	80064d2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	220d      	movs	r2, #13
 80064ce:	701a      	strb	r2, [r3, #0]
      break;
 80064d0:	e160      	b.n	8006794 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	795b      	ldrb	r3, [r3, #5]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 ff97 	bl	800740c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	791b      	ldrb	r3, [r3, #4]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 ff91 	bl	800740c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
      break;
 80064f0:	e150      	b.n	8006794 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80064f2:	2112      	movs	r1, #18
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f9f1 	bl	80068dc <USBH_Get_DevDesc>
 80064fa:	4603      	mov	r3, r0
 80064fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800650a:	e145      	b.n	8006798 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b03      	cmp	r3, #3
 8006510:	f040 8142 	bne.w	8006798 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800651a:	3301      	adds	r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800652a:	2b03      	cmp	r3, #3
 800652c:	d903      	bls.n	8006536 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	220d      	movs	r2, #13
 8006532:	701a      	strb	r2, [r3, #0]
      break;
 8006534:	e130      	b.n	8006798 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	795b      	ldrb	r3, [r3, #5]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 ff65 	bl	800740c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	791b      	ldrb	r3, [r3, #4]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 ff5f 	bl	800740c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
      break;
 800655a:	e11d      	b.n	8006798 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800655c:	2101      	movs	r1, #1
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa68 	bl	8006a34 <USBH_SetAddress>
 8006564:	4603      	mov	r3, r0
 8006566:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d132      	bne.n	80065d4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800656e:	2002      	movs	r0, #2
 8006570:	f001 fa42 	bl	80079f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2203      	movs	r2, #3
 8006580:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7919      	ldrb	r1, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006596:	b292      	uxth	r2, r2
 8006598:	9202      	str	r2, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	9201      	str	r2, [sp, #4]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4603      	mov	r3, r0
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fee1 	bl	800736c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	7959      	ldrb	r1, [r3, #5]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065be:	b292      	uxth	r2, r2
 80065c0:	9202      	str	r2, [sp, #8]
 80065c2:	2200      	movs	r2, #0
 80065c4:	9201      	str	r2, [sp, #4]
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	4603      	mov	r3, r0
 80065ca:	2200      	movs	r2, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fecd 	bl	800736c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065d2:	e0e3      	b.n	800679c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	f040 80e0 	bne.w	800679c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	220d      	movs	r2, #13
 80065e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	705a      	strb	r2, [r3, #1]
      break;
 80065e8:	e0d8      	b.n	800679c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80065ea:	2109      	movs	r1, #9
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f99d 	bl	800692c <USBH_Get_CfgDesc>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80065f6:	7bbb      	ldrb	r3, [r7, #14]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2204      	movs	r2, #4
 8006600:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006602:	e0cd      	b.n	80067a0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b03      	cmp	r3, #3
 8006608:	f040 80ca 	bne.w	80067a0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006612:	3301      	adds	r3, #1
 8006614:	b2da      	uxtb	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006622:	2b03      	cmp	r3, #3
 8006624:	d903      	bls.n	800662e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	220d      	movs	r2, #13
 800662a:	701a      	strb	r2, [r3, #0]
      break;
 800662c:	e0b8      	b.n	80067a0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	795b      	ldrb	r3, [r3, #5]
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fee9 	bl	800740c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fee3 	bl	800740c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
      break;
 8006652:	e0a5      	b.n	80067a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f965 	bl	800692c <USBH_Get_CfgDesc>
 8006662:	4603      	mov	r3, r0
 8006664:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2205      	movs	r2, #5
 8006670:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006672:	e097      	b.n	80067a4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	2b03      	cmp	r3, #3
 8006678:	f040 8094 	bne.w	80067a4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006682:	3301      	adds	r3, #1
 8006684:	b2da      	uxtb	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006692:	2b03      	cmp	r3, #3
 8006694:	d903      	bls.n	800669e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	220d      	movs	r2, #13
 800669a:	701a      	strb	r2, [r3, #0]
      break;
 800669c:	e082      	b.n	80067a4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	795b      	ldrb	r3, [r3, #5]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 feb1 	bl	800740c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 feab 	bl	800740c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	e06f      	b.n	80067a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d019      	beq.n	8006702 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066da:	23ff      	movs	r3, #255	; 0xff
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f949 	bl	8006974 <USBH_Get_StringDesc>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2206      	movs	r2, #6
 80066f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80066f2:	e059      	b.n	80067a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d156      	bne.n	80067a8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2206      	movs	r2, #6
 80066fe:	705a      	strb	r2, [r3, #1]
      break;
 8006700:	e052      	b.n	80067a8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2206      	movs	r2, #6
 8006706:	705a      	strb	r2, [r3, #1]
      break;
 8006708:	e04e      	b.n	80067a8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006710:	2b00      	cmp	r3, #0
 8006712:	d019      	beq.n	8006748 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006720:	23ff      	movs	r3, #255	; 0xff
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f926 	bl	8006974 <USBH_Get_StringDesc>
 8006728:	4603      	mov	r3, r0
 800672a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d103      	bne.n	800673a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2207      	movs	r2, #7
 8006736:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006738:	e038      	b.n	80067ac <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	2b03      	cmp	r3, #3
 800673e:	d135      	bne.n	80067ac <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2207      	movs	r2, #7
 8006744:	705a      	strb	r2, [r3, #1]
      break;
 8006746:	e031      	b.n	80067ac <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2207      	movs	r2, #7
 800674c:	705a      	strb	r2, [r3, #1]
      break;
 800674e:	e02d      	b.n	80067ac <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006756:	2b00      	cmp	r3, #0
 8006758:	d017      	beq.n	800678a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006766:	23ff      	movs	r3, #255	; 0xff
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f903 	bl	8006974 <USBH_Get_StringDesc>
 800676e:	4603      	mov	r3, r0
 8006770:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d102      	bne.n	800677e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800677c:	e018      	b.n	80067b0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b03      	cmp	r3, #3
 8006782:	d115      	bne.n	80067b0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e012      	b.n	80067b0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
      break;
 800678e:	e00f      	b.n	80067b0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006790:	bf00      	nop
 8006792:	e00e      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 8006794:	bf00      	nop
 8006796:	e00c      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 8006798:	bf00      	nop
 800679a:	e00a      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 800679c:	bf00      	nop
 800679e:	e008      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 80067a0:	bf00      	nop
 80067a2:	e006      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 80067a4:	bf00      	nop
 80067a6:	e004      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 80067a8:	bf00      	nop
 80067aa:	e002      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <USBH_HandleEnum+0x3be>
      break;
 80067b0:	bf00      	nop
  }
  return Status;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f804 	bl	80067fe <USBH_HandleSof>
}
 80067f6:	bf00      	nop
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b0b      	cmp	r3, #11
 800680e:	d10a      	bne.n	8006826 <USBH_HandleSof+0x28>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
  }
}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800683e:	bf00      	nop
}
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800685a:	bf00      	nop
}
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 ff56 	bl	8007766 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fda3 	bl	800740c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	795b      	ldrb	r3, [r3, #5]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fd9d 	bl	800740c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068fa:	2100      	movs	r1, #0
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f864 	bl	80069ca <USBH_GetDescriptor>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006918:	78fa      	ldrb	r2, [r7, #3]
 800691a:	b292      	uxth	r2, r2
 800691c:	4619      	mov	r1, r3
 800691e:	f000 f918 	bl	8006b52 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	331c      	adds	r3, #28
 800693c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800693e:	887b      	ldrh	r3, [r7, #2]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006948:	2100      	movs	r1, #0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f83d 	bl	80069ca <USBH_GetDescriptor>
 8006950:	4603      	mov	r3, r0
 8006952:	72fb      	strb	r3, [r7, #11]
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006960:	887a      	ldrh	r2, [r7, #2]
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f964 	bl	8006c32 <USBH_ParseCfgDesc>
  }

  return status;
 800696a:	7afb      	ldrb	r3, [r7, #11]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	461a      	mov	r2, r3
 8006980:	460b      	mov	r3, r1
 8006982:	72fb      	strb	r3, [r7, #11]
 8006984:	4613      	mov	r3, r2
 8006986:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	b29b      	uxth	r3, r3
 800698c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006990:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006998:	893b      	ldrh	r3, [r7, #8]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	460b      	mov	r3, r1
 800699e:	2100      	movs	r1, #0
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f812 	bl	80069ca <USBH_GetDescriptor>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d107      	bne.n	80069c0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069b6:	893a      	ldrh	r2, [r7, #8]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa37 	bl	8006e2e <USBH_ParseStringDesc>
  }

  return status;
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	72fb      	strb	r3, [r7, #11]
 80069d8:	4613      	mov	r3, r2
 80069da:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	789b      	ldrb	r3, [r3, #2]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d11c      	bne.n	8006a1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2206      	movs	r2, #6
 80069f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	893a      	ldrh	r2, [r7, #8]
 80069fa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80069fc:	893b      	ldrh	r3, [r7, #8]
 80069fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a06:	d104      	bne.n	8006a12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f240 4209 	movw	r2, #1033	; 0x409
 8006a0e:	829a      	strh	r2, [r3, #20]
 8006a10:	e002      	b.n	8006a18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8b3a      	ldrh	r2, [r7, #24]
 8006a1c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a1e:	8b3b      	ldrh	r3, [r7, #24]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fa50 	bl	8006eca <USBH_CtlReq>
 8006a2a:	4603      	mov	r3, r0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	789b      	ldrb	r3, [r3, #2]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10f      	bne.n	8006a68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2205      	movs	r2, #5
 8006a52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa2c 	bl	8006eca <USBH_CtlReq>
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	789b      	ldrb	r3, [r3, #2]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10e      	bne.n	8006aae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2209      	movs	r2, #9
 8006a9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	887a      	ldrh	r2, [r7, #2]
 8006aa0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa09 	bl	8006eca <USBH_CtlReq>
 8006ab8:	4603      	mov	r3, r0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b082      	sub	sp, #8
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	789b      	ldrb	r3, [r3, #2]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d10f      	bne.n	8006af6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006af6:	2200      	movs	r2, #0
 8006af8:	2100      	movs	r1, #0
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9e5 	bl	8006eca <USBH_CtlReq>
 8006b00:	4603      	mov	r3, r0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10f      	bne.n	8006b3e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9c1 	bl	8006eca <USBH_CtlReq>
 8006b48:	4603      	mov	r3, r0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	785a      	ldrb	r2, [r3, #1]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3302      	adds	r3, #2
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3303      	adds	r3, #3
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	021b      	lsls	r3, r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	791a      	ldrb	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	795a      	ldrb	r2, [r3, #5]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	799a      	ldrb	r2, [r3, #6]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	79da      	ldrb	r2, [r3, #7]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d939      	bls.n	8006c26 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3309      	adds	r3, #9
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	330a      	adds	r3, #10
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	330b      	adds	r3, #11
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	330c      	adds	r3, #12
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	330d      	adds	r3, #13
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	7b9a      	ldrb	r2, [r3, #14]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	7bda      	ldrb	r2, [r3, #15]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7c1a      	ldrb	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	7c5a      	ldrb	r2, [r3, #17]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	745a      	strb	r2, [r3, #17]
  }
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08a      	sub	sp, #40	; 0x28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	785a      	ldrb	r2, [r3, #1]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	3302      	adds	r3, #2
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	3303      	adds	r3, #3
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	791a      	ldrb	r2, [r3, #4]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	795a      	ldrb	r2, [r3, #5]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	799a      	ldrb	r2, [r3, #6]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	79da      	ldrb	r2, [r3, #7]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7a1a      	ldrb	r2, [r3, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d95f      	bls.n	8006d6e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006cae:	2309      	movs	r3, #9
 8006cb0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006cb6:	e051      	b.n	8006d5c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cb8:	f107 0316 	add.w	r3, r7, #22
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc0:	f000 f8e8 	bl	8006e94 <USBH_GetNextDesc>
 8006cc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d146      	bne.n	8006d5c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cd2:	221a      	movs	r2, #26
 8006cd4:	fb02 f303 	mul.w	r3, r2, r3
 8006cd8:	3308      	adds	r3, #8
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	3302      	adds	r3, #2
 8006ce0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ce4:	69f8      	ldr	r0, [r7, #28]
 8006ce6:	f000 f846 	bl	8006d76 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006cf4:	e022      	b.n	8006d3c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cf6:	f107 0316 	add.w	r3, r7, #22
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cfe:	f000 f8c9 	bl	8006e94 <USBH_GetNextDesc>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d117      	bne.n	8006d3c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d10:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d14:	3201      	adds	r2, #1
 8006d16:	00d2      	lsls	r2, r2, #3
 8006d18:	211a      	movs	r1, #26
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	3308      	adds	r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2c:	69b8      	ldr	r0, [r7, #24]
 8006d2e:	f000 f851 	bl	8006dd4 <USBH_ParseEPDesc>
            ep_ix++;
 8006d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d36:	3301      	adds	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	791b      	ldrb	r3, [r3, #4]
 8006d40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d204      	bcs.n	8006d52 <USBH_ParseCfgDesc+0x120>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	885a      	ldrh	r2, [r3, #2]
 8006d4c:	8afb      	ldrh	r3, [r7, #22]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d8d1      	bhi.n	8006cf6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d56:	3301      	adds	r3, #1
 8006d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d804      	bhi.n	8006d6e <USBH_ParseCfgDesc+0x13c>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	885a      	ldrh	r2, [r3, #2]
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d8a4      	bhi.n	8006cb8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3728      	adds	r7, #40	; 0x28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781a      	ldrb	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785a      	ldrb	r2, [r3, #1]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	789a      	ldrb	r2, [r3, #2]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	78da      	ldrb	r2, [r3, #3]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	791a      	ldrb	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	795a      	ldrb	r2, [r3, #5]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	799a      	ldrb	r2, [r3, #6]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	79da      	ldrb	r2, [r3, #7]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	7a1a      	ldrb	r2, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	721a      	strb	r2, [r3, #8]
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	785a      	ldrb	r2, [r3, #1]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	789a      	ldrb	r2, [r3, #2]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	78da      	ldrb	r2, [r3, #3]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	3304      	adds	r3, #4
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	3305      	adds	r3, #5
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	799a      	ldrb	r2, [r3, #6]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	719a      	strb	r2, [r3, #6]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b087      	sub	sp, #28
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d120      	bne.n	8006e88 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	1e9a      	subs	r2, r3, #2
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	bf28      	it	cs
 8006e52:	4613      	movcs	r3, r2
 8006e54:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3302      	adds	r3, #2
 8006e5a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	82fb      	strh	r3, [r7, #22]
 8006e60:	e00b      	b.n	8006e7a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e62:	8afb      	ldrh	r3, [r7, #22]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e74:	8afb      	ldrh	r3, [r7, #22]
 8006e76:	3302      	adds	r3, #2
 8006e78:	82fb      	strh	r3, [r7, #22]
 8006e7a:	8afa      	ldrh	r2, [r7, #22]
 8006e7c:	8abb      	ldrh	r3, [r7, #20]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3ef      	bcc.n	8006e62 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
  }
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	881a      	ldrh	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	789b      	ldrb	r3, [r3, #2]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d002      	beq.n	8006eea <USBH_CtlReq+0x20>
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d00f      	beq.n	8006f08 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006ee8:	e027      	b.n	8006f3a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2202      	movs	r2, #2
 8006f00:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
      break;
 8006f06:	e018      	b.n	8006f3a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f81b 	bl	8006f44 <USBH_HandleControl>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d002      	beq.n	8006f1e <USBH_CtlReq+0x54>
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d106      	bne.n	8006f2c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	761a      	strb	r2, [r3, #24]
      break;
 8006f2a:	e005      	b.n	8006f38 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d102      	bne.n	8006f38 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	709a      	strb	r2, [r3, #2]
      break;
 8006f38:	bf00      	nop
  }
  return status;
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	7e1b      	ldrb	r3, [r3, #24]
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2b0a      	cmp	r3, #10
 8006f5c:	f200 8156 	bhi.w	800720c <USBH_HandleControl+0x2c8>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <USBH_HandleControl+0x24>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	08006faf 	.word	0x08006faf
 8006f70:	08007019 	.word	0x08007019
 8006f74:	0800703f 	.word	0x0800703f
 8006f78:	08007077 	.word	0x08007077
 8006f7c:	080070a1 	.word	0x080070a1
 8006f80:	080070f3 	.word	0x080070f3
 8006f84:	08007115 	.word	0x08007115
 8006f88:	08007151 	.word	0x08007151
 8006f8c:	08007177 	.word	0x08007177
 8006f90:	080071b5 	.word	0x080071b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f103 0110 	add.w	r1, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	795b      	ldrb	r3, [r3, #5]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f943 	bl	800722c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	761a      	strb	r2, [r3, #24]
      break;
 8006fac:	e139      	b.n	8007222 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	795b      	ldrb	r3, [r3, #5]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fcc5 	bl	8007944 <USBH_LL_GetURBState>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d11e      	bne.n	8007002 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7c1b      	ldrb	r3, [r3, #16]
 8006fc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	8adb      	ldrh	r3, [r3, #22]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006fd6:	7b7b      	ldrb	r3, [r7, #13]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d103      	bne.n	8006fe4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2203      	movs	r2, #3
 8006fe0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fe2:	e115      	b.n	8007210 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2205      	movs	r2, #5
 8006fe8:	761a      	strb	r2, [r3, #24]
      break;
 8006fea:	e111      	b.n	8007210 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006fec:	7b7b      	ldrb	r3, [r7, #13]
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d103      	bne.n	8006ffa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2209      	movs	r2, #9
 8006ff6:	761a      	strb	r2, [r3, #24]
      break;
 8006ff8:	e10a      	b.n	8007210 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	761a      	strb	r2, [r3, #24]
      break;
 8007000:	e106      	b.n	8007210 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d003      	beq.n	8007010 <USBH_HandleControl+0xcc>
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b02      	cmp	r3, #2
 800700c:	f040 8100 	bne.w	8007210 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	220b      	movs	r2, #11
 8007014:	761a      	strb	r2, [r3, #24]
      break;
 8007016:	e0fb      	b.n	8007210 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800701e:	b29a      	uxth	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6899      	ldr	r1, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	899a      	ldrh	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	791b      	ldrb	r3, [r3, #4]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f93a 	bl	80072aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	761a      	strb	r2, [r3, #24]
      break;
 800703c:	e0f1      	b.n	8007222 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	791b      	ldrb	r3, [r3, #4]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fc7d 	bl	8007944 <USBH_LL_GetURBState>
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d102      	bne.n	800705a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2209      	movs	r2, #9
 8007058:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b05      	cmp	r3, #5
 800705e:	d102      	bne.n	8007066 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007060:	2303      	movs	r3, #3
 8007062:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007064:	e0d6      	b.n	8007214 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b04      	cmp	r3, #4
 800706a:	f040 80d3 	bne.w	8007214 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	220b      	movs	r2, #11
 8007072:	761a      	strb	r2, [r3, #24]
      break;
 8007074:	e0ce      	b.n	8007214 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6899      	ldr	r1, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	899a      	ldrh	r2, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	795b      	ldrb	r3, [r3, #5]
 8007082:	2001      	movs	r0, #1
 8007084:	9000      	str	r0, [sp, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f8ea 	bl	8007260 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007092:	b29a      	uxth	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2206      	movs	r2, #6
 800709c:	761a      	strb	r2, [r3, #24]
      break;
 800709e:	e0c0      	b.n	8007222 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	795b      	ldrb	r3, [r3, #5]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fc4c 	bl	8007944 <USBH_LL_GetURBState>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d103      	bne.n	80070be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2207      	movs	r2, #7
 80070ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070bc:	e0ac      	b.n	8007218 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d105      	bne.n	80070d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	220c      	movs	r2, #12
 80070c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80070ca:	2303      	movs	r3, #3
 80070cc:	73fb      	strb	r3, [r7, #15]
      break;
 80070ce:	e0a3      	b.n	8007218 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d103      	bne.n	80070de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2205      	movs	r2, #5
 80070da:	761a      	strb	r2, [r3, #24]
      break;
 80070dc:	e09c      	b.n	8007218 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b04      	cmp	r3, #4
 80070e2:	f040 8099 	bne.w	8007218 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	220b      	movs	r2, #11
 80070ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80070ec:	2302      	movs	r3, #2
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	e092      	b.n	8007218 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8d5 	bl	80072aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2208      	movs	r2, #8
 8007110:	761a      	strb	r2, [r3, #24]

      break;
 8007112:	e086      	b.n	8007222 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	791b      	ldrb	r3, [r3, #4]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fc12 	bl	8007944 <USBH_LL_GetURBState>
 8007120:	4603      	mov	r3, r0
 8007122:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d105      	bne.n	8007136 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	220d      	movs	r2, #13
 800712e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007134:	e072      	b.n	800721c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d103      	bne.n	8007144 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	220b      	movs	r2, #11
 8007140:	761a      	strb	r2, [r3, #24]
      break;
 8007142:	e06b      	b.n	800721c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d168      	bne.n	800721c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800714a:	2303      	movs	r3, #3
 800714c:	73fb      	strb	r3, [r7, #15]
      break;
 800714e:	e065      	b.n	800721c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	795b      	ldrb	r3, [r3, #5]
 8007154:	2201      	movs	r2, #1
 8007156:	9200      	str	r2, [sp, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f87f 	bl	8007260 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	220a      	movs	r2, #10
 8007172:	761a      	strb	r2, [r3, #24]
      break;
 8007174:	e055      	b.n	8007222 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	795b      	ldrb	r3, [r3, #5]
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fbe1 	bl	8007944 <USBH_LL_GetURBState>
 8007182:	4603      	mov	r3, r0
 8007184:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d105      	bne.n	8007198 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	220d      	movs	r2, #13
 8007194:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007196:	e043      	b.n	8007220 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d103      	bne.n	80071a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2209      	movs	r2, #9
 80071a2:	761a      	strb	r2, [r3, #24]
      break;
 80071a4:	e03c      	b.n	8007220 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d139      	bne.n	8007220 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	220b      	movs	r2, #11
 80071b0:	761a      	strb	r2, [r3, #24]
      break;
 80071b2:	e035      	b.n	8007220 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	7e5b      	ldrb	r3, [r3, #25]
 80071b8:	3301      	adds	r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	765a      	strb	r2, [r3, #25]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7e5b      	ldrb	r3, [r3, #25]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d806      	bhi.n	80071d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80071d4:	e025      	b.n	8007222 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071dc:	2106      	movs	r1, #6
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	795b      	ldrb	r3, [r3, #5]
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f90c 	bl	800740c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	791b      	ldrb	r3, [r3, #4]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f906 	bl	800740c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007206:	2302      	movs	r3, #2
 8007208:	73fb      	strb	r3, [r7, #15]
      break;
 800720a:	e00a      	b.n	8007222 <USBH_HandleControl+0x2de>

    default:
      break;
 800720c:	bf00      	nop
 800720e:	e008      	b.n	8007222 <USBH_HandleControl+0x2de>
      break;
 8007210:	bf00      	nop
 8007212:	e006      	b.n	8007222 <USBH_HandleControl+0x2de>
      break;
 8007214:	bf00      	nop
 8007216:	e004      	b.n	8007222 <USBH_HandleControl+0x2de>
      break;
 8007218:	bf00      	nop
 800721a:	e002      	b.n	8007222 <USBH_HandleControl+0x2de>
      break;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <USBH_HandleControl+0x2de>
      break;
 8007220:	bf00      	nop
  }

  return status;
 8007222:	7bfb      	ldrb	r3, [r7, #15]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af04      	add	r7, sp, #16
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800723a:	79f9      	ldrb	r1, [r7, #7]
 800723c:	2300      	movs	r3, #0
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	2308      	movs	r3, #8
 8007242:	9302      	str	r3, [sp, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	2300      	movs	r3, #0
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	2300      	movs	r3, #0
 800724e:	2200      	movs	r2, #0
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fb46 	bl	80078e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af04      	add	r7, sp, #16
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	460b      	mov	r3, r1
 8007270:	80fb      	strh	r3, [r7, #6]
 8007272:	4613      	mov	r3, r2
 8007274:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007284:	7979      	ldrb	r1, [r7, #5]
 8007286:	7e3b      	ldrb	r3, [r7, #24]
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	9302      	str	r3, [sp, #8]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	9301      	str	r3, [sp, #4]
 8007292:	2301      	movs	r3, #1
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	2300      	movs	r3, #0
 8007298:	2200      	movs	r2, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 fb21 	bl	80078e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af04      	add	r7, sp, #16
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4611      	mov	r1, r2
 80072b6:	461a      	mov	r2, r3
 80072b8:	460b      	mov	r3, r1
 80072ba:	80fb      	strh	r3, [r7, #6]
 80072bc:	4613      	mov	r3, r2
 80072be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072c0:	7979      	ldrb	r1, [r7, #5]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	9302      	str	r3, [sp, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	2301      	movs	r3, #1
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	2201      	movs	r2, #1
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb03 	bl	80078e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80072dc:	2300      	movs	r3, #0

}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b088      	sub	sp, #32
 80072ea:	af04      	add	r7, sp, #16
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	4611      	mov	r1, r2
 80072f2:	461a      	mov	r2, r3
 80072f4:	460b      	mov	r3, r1
 80072f6:	80fb      	strh	r3, [r7, #6]
 80072f8:	4613      	mov	r3, r2
 80072fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800730a:	7979      	ldrb	r1, [r7, #5]
 800730c:	7e3b      	ldrb	r3, [r7, #24]
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	9302      	str	r3, [sp, #8]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	9301      	str	r3, [sp, #4]
 8007318:	2301      	movs	r3, #1
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	2302      	movs	r3, #2
 800731e:	2200      	movs	r2, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fade 	bl	80078e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af04      	add	r7, sp, #16
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4611      	mov	r1, r2
 800733c:	461a      	mov	r2, r3
 800733e:	460b      	mov	r3, r1
 8007340:	80fb      	strh	r3, [r7, #6]
 8007342:	4613      	mov	r3, r2
 8007344:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007346:	7979      	ldrb	r1, [r7, #5]
 8007348:	2300      	movs	r3, #0
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	2301      	movs	r3, #1
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2302      	movs	r3, #2
 800735a:	2201      	movs	r2, #1
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fac0 	bl	80078e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af04      	add	r7, sp, #16
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4603      	mov	r3, r0
 800737c:	70fb      	strb	r3, [r7, #3]
 800737e:	460b      	mov	r3, r1
 8007380:	70bb      	strb	r3, [r7, #2]
 8007382:	4613      	mov	r3, r2
 8007384:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007386:	7878      	ldrb	r0, [r7, #1]
 8007388:	78ba      	ldrb	r2, [r7, #2]
 800738a:	78f9      	ldrb	r1, [r7, #3]
 800738c:	8b3b      	ldrh	r3, [r7, #24]
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	7d3b      	ldrb	r3, [r7, #20]
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	7c3b      	ldrb	r3, [r7, #16]
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	4603      	mov	r3, r0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa53 	bl	8007846 <USBH_LL_OpenPipe>

  return USBH_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	460b      	mov	r3, r1
 80073b4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa72 	bl	80078a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f836 	bl	8007448 <USBH_GetFreePipe>
 80073dc:	4603      	mov	r3, r0
 80073de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80073e0:	89fb      	ldrh	r3, [r7, #14]
 80073e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00a      	beq.n	8007400 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	33e0      	adds	r3, #224	; 0xe0
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007400:	89fb      	ldrh	r3, [r7, #14]
 8007402:	b2db      	uxtb	r3, r3
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	2b0a      	cmp	r3, #10
 800741c:	d80d      	bhi.n	800743a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	33e0      	adds	r3, #224	; 0xe0
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	33e0      	adds	r3, #224	; 0xe0
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	e00f      	b.n	800747a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	33e0      	adds	r3, #224	; 0xe0
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	b29b      	uxth	r3, r3
 8007472:	e007      	b.n	8007484 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	3301      	adds	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	2b0a      	cmp	r3, #10
 800747e:	d9ec      	bls.n	800745a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007480:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007494:	2201      	movs	r2, #1
 8007496:	490e      	ldr	r1, [pc, #56]	; (80074d0 <MX_USB_HOST_Init+0x40>)
 8007498:	480e      	ldr	r0, [pc, #56]	; (80074d4 <MX_USB_HOST_Init+0x44>)
 800749a:	f7fe fca1 	bl	8005de0 <USBH_Init>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074a4:	f7f9 fb04 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074a8:	490b      	ldr	r1, [pc, #44]	; (80074d8 <MX_USB_HOST_Init+0x48>)
 80074aa:	480a      	ldr	r0, [pc, #40]	; (80074d4 <MX_USB_HOST_Init+0x44>)
 80074ac:	f7fe fd26 	bl	8005efc <USBH_RegisterClass>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074b6:	f7f9 fafb 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074ba:	4806      	ldr	r0, [pc, #24]	; (80074d4 <MX_USB_HOST_Init+0x44>)
 80074bc:	f7fe fdaa 	bl	8006014 <USBH_Start>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074c6:	f7f9 faf3 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	080074f1 	.word	0x080074f1
 80074d4:	200001c4 	.word	0x200001c4
 80074d8:	2000001c 	.word	0x2000001c

080074dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80074e0:	4802      	ldr	r0, [pc, #8]	; (80074ec <MX_USB_HOST_Process+0x10>)
 80074e2:	f7fe fda7 	bl	8006034 <USBH_Process>
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200001c4 	.word	0x200001c4

080074f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	3b01      	subs	r3, #1
 8007500:	2b04      	cmp	r3, #4
 8007502:	d819      	bhi.n	8007538 <USBH_UserProcess+0x48>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBH_UserProcess+0x1c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007539 	.word	0x08007539
 8007510:	08007529 	.word	0x08007529
 8007514:	08007539 	.word	0x08007539
 8007518:	08007531 	.word	0x08007531
 800751c:	08007521 	.word	0x08007521
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007520:	4b09      	ldr	r3, [pc, #36]	; (8007548 <USBH_UserProcess+0x58>)
 8007522:	2203      	movs	r2, #3
 8007524:	701a      	strb	r2, [r3, #0]
  break;
 8007526:	e008      	b.n	800753a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007528:	4b07      	ldr	r3, [pc, #28]	; (8007548 <USBH_UserProcess+0x58>)
 800752a:	2202      	movs	r2, #2
 800752c:	701a      	strb	r2, [r3, #0]
  break;
 800752e:	e004      	b.n	800753a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <USBH_UserProcess+0x58>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
  break;
 8007536:	e000      	b.n	800753a <USBH_UserProcess+0x4a>

  default:
  break;
 8007538:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	200000c0 	.word	0x200000c0

0800754c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	; 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007554:	f107 0314 	add.w	r3, r7, #20
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	60da      	str	r2, [r3, #12]
 8007562:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800756c:	d147      	bne.n	80075fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800756e:	2300      	movs	r3, #0
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	4b25      	ldr	r3, [pc, #148]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	4a24      	ldr	r2, [pc, #144]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	6313      	str	r3, [r2, #48]	; 0x30
 800757e:	4b22      	ldr	r3, [pc, #136]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800758a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4619      	mov	r1, r3
 800759e:	481b      	ldr	r0, [pc, #108]	; (800760c <HAL_HCD_MspInit+0xc0>)
 80075a0:	f7f9 fd80 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075aa:	2302      	movs	r3, #2
 80075ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b2:	2300      	movs	r3, #0
 80075b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075b6:	230a      	movs	r3, #10
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075ba:	f107 0314 	add.w	r3, r7, #20
 80075be:	4619      	mov	r1, r3
 80075c0:	4812      	ldr	r0, [pc, #72]	; (800760c <HAL_HCD_MspInit+0xc0>)
 80075c2:	f7f9 fd6f 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075c6:	4b10      	ldr	r3, [pc, #64]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 80075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ca:	4a0f      	ldr	r2, [pc, #60]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 80075cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d0:	6353      	str	r3, [r2, #52]	; 0x34
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 80075d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075da:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 80075dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075e0:	6453      	str	r3, [r2, #68]	; 0x44
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <HAL_HCD_MspInit+0xbc>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075ee:	2200      	movs	r2, #0
 80075f0:	2100      	movs	r1, #0
 80075f2:	2043      	movs	r0, #67	; 0x43
 80075f4:	f7f9 fd1f 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075f8:	2043      	movs	r0, #67	; 0x43
 80075fa:	f7f9 fd38 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80075fe:	bf00      	nop
 8007600:	3728      	adds	r7, #40	; 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40023800 	.word	0x40023800
 800760c:	40020000 	.word	0x40020000

08007610 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff f8db 	bl	80067da <USBH_LL_IncTimer>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f913 	bl	8006866 <USBH_LL_Connect>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff f91c 	bl	8006894 <USBH_LL_Disconnect>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
 8007670:	4613      	mov	r3, r2
 8007672:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff f8cd 	bl	800682e <USBH_LL_PortEnabled>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f8cd 	bl	800684a <USBH_LL_PortDisabled>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d12a      	bne.n	8007720 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076ca:	4a18      	ldr	r2, [pc, #96]	; (800772c <USBH_LL_Init+0x74>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <USBH_LL_Init+0x74>)
 80076d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <USBH_LL_Init+0x74>)
 80076dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <USBH_LL_Init+0x74>)
 80076e4:	2208      	movs	r2, #8
 80076e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80076e8:	4b10      	ldr	r3, [pc, #64]	; (800772c <USBH_LL_Init+0x74>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <USBH_LL_Init+0x74>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <USBH_LL_Init+0x74>)
 80076f6:	2202      	movs	r2, #2
 80076f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <USBH_LL_Init+0x74>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007700:	480a      	ldr	r0, [pc, #40]	; (800772c <USBH_LL_Init+0x74>)
 8007702:	f7f9 fe9c 	bl	800143e <HAL_HCD_Init>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800770c:	f7f9 f9d0 	bl	8000ab0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007710:	4806      	ldr	r0, [pc, #24]	; (800772c <USBH_LL_Init+0x74>)
 8007712:	f7fa fa80 	bl	8001c16 <HAL_HCD_GetCurrentFrame>
 8007716:	4603      	mov	r3, r0
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff f84e 	bl	80067bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	2000059c 	.word	0x2000059c

08007730 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007746:	4618      	mov	r0, r3
 8007748:	f7fa f9ef 	bl	8001b2a <HAL_HCD_Start>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 f95c 	bl	8007a10 <USBH_Get_USB_Status>
 8007758:	4603      	mov	r3, r0
 800775a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800775c:	7bbb      	ldrb	r3, [r7, #14]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800777c:	4618      	mov	r0, r3
 800777e:	f7fa f9f7 	bl	8001b70 <HAL_HCD_Stop>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f941 	bl	8007a10 <USBH_Get_USB_Status>
 800778e:	4603      	mov	r3, r0
 8007790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007792:	7bbb      	ldrb	r3, [r7, #14]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077a4:	2301      	movs	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fa fa3f 	bl	8001c32 <HAL_HCD_GetCurrentSpeed>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d00c      	beq.n	80077d4 <USBH_LL_GetSpeed+0x38>
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d80d      	bhi.n	80077da <USBH_LL_GetSpeed+0x3e>
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <USBH_LL_GetSpeed+0x2c>
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d003      	beq.n	80077ce <USBH_LL_GetSpeed+0x32>
 80077c6:	e008      	b.n	80077da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
    break;
 80077cc:	e008      	b.n	80077e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077ce:	2301      	movs	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
    break;
 80077d2:	e005      	b.n	80077e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077d4:	2302      	movs	r3, #2
 80077d6:	73fb      	strb	r3, [r7, #15]
    break;
 80077d8:	e002      	b.n	80077e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80077da:	2301      	movs	r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
    break;
 80077de:	bf00      	nop
  }
  return  speed;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007800:	4618      	mov	r0, r3
 8007802:	f7fa f9d2 	bl	8001baa <HAL_HCD_ResetPort>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 f8ff 	bl	8007a10 <USBH_Get_USB_Status>
 8007812:	4603      	mov	r3, r0
 8007814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007816:	7bbb      	ldrb	r3, [r7, #14]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fa f9d9 	bl	8001bee <HAL_HCD_HC_GetXferCount>
 800783c:	4603      	mov	r3, r0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007846:	b590      	push	{r4, r7, lr}
 8007848:	b089      	sub	sp, #36	; 0x24
 800784a:	af04      	add	r7, sp, #16
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	461a      	mov	r2, r3
 8007854:	4603      	mov	r3, r0
 8007856:	70fb      	strb	r3, [r7, #3]
 8007858:	460b      	mov	r3, r1
 800785a:	70bb      	strb	r3, [r7, #2]
 800785c:	4613      	mov	r3, r2
 800785e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800786e:	787c      	ldrb	r4, [r7, #1]
 8007870:	78ba      	ldrb	r2, [r7, #2]
 8007872:	78f9      	ldrb	r1, [r7, #3]
 8007874:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007876:	9302      	str	r3, [sp, #8]
 8007878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	4623      	mov	r3, r4
 8007886:	f7f9 fe3c 	bl	8001502 <HAL_HCD_HC_Init>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f8bd 	bl	8007a10 <USBH_Get_USB_Status>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789a:	7bbb      	ldrb	r3, [r7, #14]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd90      	pop	{r4, r7, pc}

080078a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078be:	78fa      	ldrb	r2, [r7, #3]
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f9 feac 	bl	8001620 <HAL_HCD_HC_Halt>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f89e 	bl	8007a10 <USBH_Get_USB_Status>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078e2:	b590      	push	{r4, r7, lr}
 80078e4:	b089      	sub	sp, #36	; 0x24
 80078e6:	af04      	add	r7, sp, #16
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	4608      	mov	r0, r1
 80078ec:	4611      	mov	r1, r2
 80078ee:	461a      	mov	r2, r3
 80078f0:	4603      	mov	r3, r0
 80078f2:	70fb      	strb	r3, [r7, #3]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70bb      	strb	r3, [r7, #2]
 80078f8:	4613      	mov	r3, r2
 80078fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800790a:	787c      	ldrb	r4, [r7, #1]
 800790c:	78ba      	ldrb	r2, [r7, #2]
 800790e:	78f9      	ldrb	r1, [r7, #3]
 8007910:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4623      	mov	r3, r4
 8007926:	f7f9 fe9f 	bl	8001668 <HAL_HCD_HC_SubmitRequest>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f86d 	bl	8007a10 <USBH_Get_USB_Status>
 8007936:	4603      	mov	r3, r0
 8007938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793a:	7bbb      	ldrb	r3, [r7, #14]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	bd90      	pop	{r4, r7, pc}

08007944 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f7fa f933 	bl	8001bc6 <HAL_HCD_HC_GetURBState>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800797c:	2b01      	cmp	r3, #1
 800797e:	d103      	bne.n	8007988 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f870 	bl	8007a68 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007988:	20c8      	movs	r0, #200	; 0xc8
 800798a:	f7f9 fa55 	bl	8000e38 <HAL_Delay>
  return USBH_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
 80079a4:	4613      	mov	r3, r2
 80079a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	212c      	movs	r1, #44	; 0x2c
 80079b6:	fb01 f303 	mul.w	r3, r1, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	333b      	adds	r3, #59	; 0x3b
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d009      	beq.n	80079d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	212c      	movs	r1, #44	; 0x2c
 80079ca:	fb01 f303 	mul.w	r3, r1, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	3354      	adds	r3, #84	; 0x54
 80079d2:	78ba      	ldrb	r2, [r7, #2]
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e008      	b.n	80079ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	212c      	movs	r1, #44	; 0x2c
 80079de:	fb01 f303 	mul.w	r3, r1, r3
 80079e2:	4413      	add	r3, r2
 80079e4:	3355      	adds	r3, #85	; 0x55
 80079e6:	78ba      	ldrb	r2, [r7, #2]
 80079e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f9 fa19 	bl	8000e38 <HAL_Delay>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d817      	bhi.n	8007a54 <USBH_Get_USB_Status+0x44>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <USBH_Get_USB_Status+0x1c>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007a3d 	.word	0x08007a3d
 8007a30:	08007a43 	.word	0x08007a43
 8007a34:	08007a49 	.word	0x08007a49
 8007a38:	08007a4f 	.word	0x08007a4f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a40:	e00b      	b.n	8007a5a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a42:	2302      	movs	r3, #2
 8007a44:	73fb      	strb	r3, [r7, #15]
    break;
 8007a46:	e008      	b.n	8007a5a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4c:	e005      	b.n	8007a5a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	73fb      	strb	r3, [r7, #15]
    break;
 8007a52:	e002      	b.n	8007a5a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a54:	2302      	movs	r3, #2
 8007a56:	73fb      	strb	r3, [r7, #15]
    break;
 8007a58:	bf00      	nop
  }
  return usb_status;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e001      	b.n	8007a86 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a82:	2301      	movs	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4803      	ldr	r0, [pc, #12]	; (8007a9c <MX_DriverVbusFS+0x34>)
 8007a8e:	f7f9 fcbd 	bl	800140c <HAL_GPIO_WritePin>
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40020800 	.word	0x40020800

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000003c 	.word	0x2000003c

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	; (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	; (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	; (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	; (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 f8f8 	bl	8007cb4 <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	08007cf0 	.word	0x08007cf0
 8007ae8:	08007cf0 	.word	0x08007cf0
 8007aec:	08007cf0 	.word	0x08007cf0
 8007af0:	08007cf4 	.word	0x08007cf4

08007af4 <malloc>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <malloc+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f000 b863 	b.w	8007bc4 <_malloc_r>
 8007afe:	bf00      	nop
 8007b00:	2000003c 	.word	0x2000003c

08007b04 <free>:
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <free+0xc>)
 8007b06:	4601      	mov	r1, r0
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f000 b80b 	b.w	8007b24 <_free_r>
 8007b0e:	bf00      	nop
 8007b10:	2000003c 	.word	0x2000003c

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <_free_r>:
 8007b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b26:	2900      	cmp	r1, #0
 8007b28:	d048      	beq.n	8007bbc <_free_r+0x98>
 8007b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2e:	9001      	str	r0, [sp, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f1a1 0404 	sub.w	r4, r1, #4
 8007b36:	bfb8      	it	lt
 8007b38:	18e4      	addlt	r4, r4, r3
 8007b3a:	f000 f8ad 	bl	8007c98 <__malloc_lock>
 8007b3e:	4a20      	ldr	r2, [pc, #128]	; (8007bc0 <_free_r+0x9c>)
 8007b40:	9801      	ldr	r0, [sp, #4]
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	4615      	mov	r5, r2
 8007b46:	b933      	cbnz	r3, 8007b56 <_free_r+0x32>
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	6014      	str	r4, [r2, #0]
 8007b4c:	b003      	add	sp, #12
 8007b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b52:	f000 b8a7 	b.w	8007ca4 <__malloc_unlock>
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	d90b      	bls.n	8007b72 <_free_r+0x4e>
 8007b5a:	6821      	ldr	r1, [r4, #0]
 8007b5c:	1862      	adds	r2, r4, r1
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	bf04      	itt	eq
 8007b62:	681a      	ldreq	r2, [r3, #0]
 8007b64:	685b      	ldreq	r3, [r3, #4]
 8007b66:	6063      	str	r3, [r4, #4]
 8007b68:	bf04      	itt	eq
 8007b6a:	1852      	addeq	r2, r2, r1
 8007b6c:	6022      	streq	r2, [r4, #0]
 8007b6e:	602c      	str	r4, [r5, #0]
 8007b70:	e7ec      	b.n	8007b4c <_free_r+0x28>
 8007b72:	461a      	mov	r2, r3
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	b10b      	cbz	r3, 8007b7c <_free_r+0x58>
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d9fa      	bls.n	8007b72 <_free_r+0x4e>
 8007b7c:	6811      	ldr	r1, [r2, #0]
 8007b7e:	1855      	adds	r5, r2, r1
 8007b80:	42a5      	cmp	r5, r4
 8007b82:	d10b      	bne.n	8007b9c <_free_r+0x78>
 8007b84:	6824      	ldr	r4, [r4, #0]
 8007b86:	4421      	add	r1, r4
 8007b88:	1854      	adds	r4, r2, r1
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	6011      	str	r1, [r2, #0]
 8007b8e:	d1dd      	bne.n	8007b4c <_free_r+0x28>
 8007b90:	681c      	ldr	r4, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	6053      	str	r3, [r2, #4]
 8007b96:	4421      	add	r1, r4
 8007b98:	6011      	str	r1, [r2, #0]
 8007b9a:	e7d7      	b.n	8007b4c <_free_r+0x28>
 8007b9c:	d902      	bls.n	8007ba4 <_free_r+0x80>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	e7d3      	b.n	8007b4c <_free_r+0x28>
 8007ba4:	6825      	ldr	r5, [r4, #0]
 8007ba6:	1961      	adds	r1, r4, r5
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	bf04      	itt	eq
 8007bac:	6819      	ldreq	r1, [r3, #0]
 8007bae:	685b      	ldreq	r3, [r3, #4]
 8007bb0:	6063      	str	r3, [r4, #4]
 8007bb2:	bf04      	itt	eq
 8007bb4:	1949      	addeq	r1, r1, r5
 8007bb6:	6021      	streq	r1, [r4, #0]
 8007bb8:	6054      	str	r4, [r2, #4]
 8007bba:	e7c7      	b.n	8007b4c <_free_r+0x28>
 8007bbc:	b003      	add	sp, #12
 8007bbe:	bd30      	pop	{r4, r5, pc}
 8007bc0:	200000c4 	.word	0x200000c4

08007bc4 <_malloc_r>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	1ccd      	adds	r5, r1, #3
 8007bc8:	f025 0503 	bic.w	r5, r5, #3
 8007bcc:	3508      	adds	r5, #8
 8007bce:	2d0c      	cmp	r5, #12
 8007bd0:	bf38      	it	cc
 8007bd2:	250c      	movcc	r5, #12
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	4606      	mov	r6, r0
 8007bd8:	db01      	blt.n	8007bde <_malloc_r+0x1a>
 8007bda:	42a9      	cmp	r1, r5
 8007bdc:	d903      	bls.n	8007be6 <_malloc_r+0x22>
 8007bde:	230c      	movs	r3, #12
 8007be0:	6033      	str	r3, [r6, #0]
 8007be2:	2000      	movs	r0, #0
 8007be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be6:	f000 f857 	bl	8007c98 <__malloc_lock>
 8007bea:	4921      	ldr	r1, [pc, #132]	; (8007c70 <_malloc_r+0xac>)
 8007bec:	680a      	ldr	r2, [r1, #0]
 8007bee:	4614      	mov	r4, r2
 8007bf0:	b99c      	cbnz	r4, 8007c1a <_malloc_r+0x56>
 8007bf2:	4f20      	ldr	r7, [pc, #128]	; (8007c74 <_malloc_r+0xb0>)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	b923      	cbnz	r3, 8007c02 <_malloc_r+0x3e>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f000 f83c 	bl	8007c78 <_sbrk_r>
 8007c00:	6038      	str	r0, [r7, #0]
 8007c02:	4629      	mov	r1, r5
 8007c04:	4630      	mov	r0, r6
 8007c06:	f000 f837 	bl	8007c78 <_sbrk_r>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d123      	bne.n	8007c56 <_malloc_r+0x92>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	4630      	mov	r0, r6
 8007c14:	f000 f846 	bl	8007ca4 <__malloc_unlock>
 8007c18:	e7e3      	b.n	8007be2 <_malloc_r+0x1e>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	1b5b      	subs	r3, r3, r5
 8007c1e:	d417      	bmi.n	8007c50 <_malloc_r+0x8c>
 8007c20:	2b0b      	cmp	r3, #11
 8007c22:	d903      	bls.n	8007c2c <_malloc_r+0x68>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	441c      	add	r4, r3
 8007c28:	6025      	str	r5, [r4, #0]
 8007c2a:	e004      	b.n	8007c36 <_malloc_r+0x72>
 8007c2c:	6863      	ldr	r3, [r4, #4]
 8007c2e:	42a2      	cmp	r2, r4
 8007c30:	bf0c      	ite	eq
 8007c32:	600b      	streq	r3, [r1, #0]
 8007c34:	6053      	strne	r3, [r2, #4]
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 f834 	bl	8007ca4 <__malloc_unlock>
 8007c3c:	f104 000b 	add.w	r0, r4, #11
 8007c40:	1d23      	adds	r3, r4, #4
 8007c42:	f020 0007 	bic.w	r0, r0, #7
 8007c46:	1ac2      	subs	r2, r0, r3
 8007c48:	d0cc      	beq.n	8007be4 <_malloc_r+0x20>
 8007c4a:	1a1b      	subs	r3, r3, r0
 8007c4c:	50a3      	str	r3, [r4, r2]
 8007c4e:	e7c9      	b.n	8007be4 <_malloc_r+0x20>
 8007c50:	4622      	mov	r2, r4
 8007c52:	6864      	ldr	r4, [r4, #4]
 8007c54:	e7cc      	b.n	8007bf0 <_malloc_r+0x2c>
 8007c56:	1cc4      	adds	r4, r0, #3
 8007c58:	f024 0403 	bic.w	r4, r4, #3
 8007c5c:	42a0      	cmp	r0, r4
 8007c5e:	d0e3      	beq.n	8007c28 <_malloc_r+0x64>
 8007c60:	1a21      	subs	r1, r4, r0
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f808 	bl	8007c78 <_sbrk_r>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1dd      	bne.n	8007c28 <_malloc_r+0x64>
 8007c6c:	e7cf      	b.n	8007c0e <_malloc_r+0x4a>
 8007c6e:	bf00      	nop
 8007c70:	200000c4 	.word	0x200000c4
 8007c74:	200000c8 	.word	0x200000c8

08007c78 <_sbrk_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4d06      	ldr	r5, [pc, #24]	; (8007c94 <_sbrk_r+0x1c>)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	4604      	mov	r4, r0
 8007c80:	4608      	mov	r0, r1
 8007c82:	602b      	str	r3, [r5, #0]
 8007c84:	f7f8 fff4 	bl	8000c70 <_sbrk>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_sbrk_r+0x1a>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_sbrk_r+0x1a>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	200008a0 	.word	0x200008a0

08007c98 <__malloc_lock>:
 8007c98:	4801      	ldr	r0, [pc, #4]	; (8007ca0 <__malloc_lock+0x8>)
 8007c9a:	f000 b809 	b.w	8007cb0 <__retarget_lock_acquire_recursive>
 8007c9e:	bf00      	nop
 8007ca0:	200008a8 	.word	0x200008a8

08007ca4 <__malloc_unlock>:
 8007ca4:	4801      	ldr	r0, [pc, #4]	; (8007cac <__malloc_unlock+0x8>)
 8007ca6:	f000 b804 	b.w	8007cb2 <__retarget_lock_release_recursive>
 8007caa:	bf00      	nop
 8007cac:	200008a8 	.word	0x200008a8

08007cb0 <__retarget_lock_acquire_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_release_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <_init>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_fini>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr
